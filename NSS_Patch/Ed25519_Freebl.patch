Index: gtests/freebl_gtest/ed25519_unittest.cc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gtests/freebl_gtest/ed25519_unittest.cc b/gtests/freebl_gtest/ed25519_unittest.cc
new file mode 100644
--- /dev/null	(revision 15898+:f94b695d2232+)
+++ b/gtests/freebl_gtest/ed25519_unittest.cc	(revision 15898+:f94b695d2232+)
@@ -0,0 +1,138 @@
+// This Source Code Form is subject to the terms of the Mozilla Public
+// License, v. 2.0. If a copy of the MPL was not distributed with this file,
+// You can obtain one at http://mozilla.org/MPL/2.0/.
+
+#include "gtest/gtest.h"
+
+#include <stdint.h>
+
+#include "blapi.h"
+#include "scoped_ptrs.h"
+#include "secerr.h"
+
+namespace nss_test {
+
+class EDDSATest : public ::testing::Test {
+ protected:
+  std::vector<uint8_t> hexStringToBytes(std::string s) {
+    std::vector<uint8_t> bytes;
+    for (size_t i = 0; i < s.length(); i += 2) {
+      bytes.push_back(std::stoul(s.substr(i, 2), nullptr, 16));
+    }
+    return bytes;
+  }
+  std::string bytesToHexString(std::vector<uint8_t> bytes) {
+    std::stringstream s;
+    for (auto b : bytes) {
+      s << std::setfill('0') << std::setw(2) << std::uppercase << std::hex
+        << static_cast<int>(b);
+    }
+    return s.str();
+  }
+
+  void TestEd25519_Sign(const std::string secret, const std::string p,
+                      const std::string msg, const std::string signature) {
+
+    std::vector<uint8_t> secret_bytes = hexStringToBytes(secret);
+    ASSERT_GT(secret_bytes.size(), 0U);
+    SECItem secret_value = {siBuffer, secret_bytes.data(),
+                            static_cast<unsigned int>(secret_bytes.size())};
+
+    std::vector<uint8_t> msg_bytes = hexStringToBytes(msg);
+    const SECItem msg_value = {siBuffer, msg_bytes.data(),
+                               static_cast<unsigned int>(msg_bytes.size())};
+
+    std::vector<uint8_t> public_bytes = hexStringToBytes(p);
+    const SECItem public_value = {
+        siBuffer, public_bytes.data(),
+        static_cast<unsigned int>(public_bytes.size())};
+
+    ScopedSECItem signature_item(SECITEM_AllocItem(nullptr, nullptr, 64U));
+
+    EDDSAPrivateKey key;
+    key.privateValue = secret_value;
+
+    SECStatus rv = Ed25519_SignDigest(&key, signature_item.get(), &msg_value);
+    ASSERT_EQ(SECSuccess, rv);
+
+    EDDSAPublicKey public_key;
+    public_key.publicValue = public_value;
+
+    rv = Ed25519_VerifyDigest(&public_key, signature_item.get(), &msg_value);
+    ASSERT_EQ(SECSuccess, rv);
+
+    std::string signature_result = bytesToHexString(std::vector<uint8_t>(
+        signature_item->data, signature_item->data + signature_item->len));
+    EXPECT_EQ(signature_result, signature);
+  }
+};
+
+TEST_F(EDDSATest, TestEd25519_Sign) {
+  TestEd25519_Sign(
+      "4ccd089b28ff96da9db6c346ec114e0f5b8a319f35aba624da8cf6ed4fb8a6fb",
+      "3d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c", "72",
+      "92A009A9F0D4CAB8720E820B5F642540A2B27B5416503F8FB3762223EBDB69DA085AC1E4"
+      "3E15996E458F3613D0F11D8C387B2EAEB4302AEEB00D291612BB0C00");
+}
+TEST_F(EDDSATest, TestEd25519_Sign2) {
+  TestEd25519_Sign(
+      "9d61b19deffd5a60ba844af492ec2cc44449c5697b326919703bac031cae7f60",
+      "d75a980182b10ab7d54bfed3c964073a0ee172f3daa62325af021a68f707511a", "",
+      "E5564300C360AC729086E2CC806E828A84877F1EB8E5D974D873E065224901555FB88215"
+      "90A33BACC61E39701CF9B46BD25BF5F0595BBE24655141438E7A100B");
+}
+TEST_F(EDDSATest, TestEd25519_Sign3) {
+  TestEd25519_Sign(
+      "c5aa8df43f9f837bedb7442f31dcb7b166d38535076f094b85ce3a2e0b4458f7",
+      "fc51cd8e6218a1a38da47ed00230f0580816ed13ba3303ac5deb911548908025",
+      "af82",
+      "6291D657DEEC24024827E69C3ABE01A30CE548A284743A445E3680D7DB5AC3AC18FF9B53"
+      "8D16F290AE67F760984DC6594A7C15E9716ED28DC027BECEEA1EC40A");
+}
+TEST_F(EDDSATest, TestEd25519_Sign4) {
+  TestEd25519_Sign(
+      "f5e5767cf153319517630f226876b86c8160cc583bc013744c6bf255f5cc0ee5",
+      "278117fc144c72340f67d0f2316e8386ceffbf2b2428c9c51fef7c597f1d426e",
+      "08b8b2b733424243760fe426a4b54908632110a66c2f6591eabd3345e3e4eb98fa6e264b"
+      "f09efe12ee50f8f54e9f77b1e355f6c50544e23fb1433ddf73be84d879de7c0046dc4996"
+      "d9e773f4bc9efe5738829adb26c81b37c93a1b270b20329d658675fc6ea534e0810a4432"
+      "826bf58c941efb65d57a338bbd2e26640f89ffbc1a858efcb8550ee3a5e1998bd177e93a"
+      "7363c344fe6b199ee5d02e82d522c4feba15452f80288a821a579116ec6dad2b3b310da9"
+      "03401aa62100ab5d1a36553e06203b33890cc9b832f79ef80560ccb9a39ce767967ed628"
+      "c6ad573cb116dbefefd75499da96bd68a8a97b928a8bbc103b6621fcde2beca1231d206b"
+      "e6cd9ec7aff6f6c94fcd7204ed3455c68c83f4a41da4af2b74ef5c53f1d8ac70bdcb7ed1"
+      "85ce81bd84359d44254d95629e9855a94a7c1958d1f8ada5d0532ed8a5aa3fb2d17ba70e"
+      "b6248e594e1a2297acbbb39d502f1a8c6eb6f1ce22b3de1a1f40cc24554119a831a9aad6"
+      "079cad88425de6bde1a9187ebb6092cf67bf2b13fd65f27088d78b7e883c8759d2c4f5c6"
+      "5adb7553878ad575f9fad878e80a0c9ba63bcbcc2732e69485bbc9c90bfbd62481d9089b"
+      "eccf80cfe2df16a2cf65bd92dd597b0707e0917af48bbb75fed413d238f5555a7a569d80"
+      "c3414a8d0859dc65a46128bab27af87a71314f318c782b23ebfe808b82b0ce26401d2e22"
+      "f04d83d1255dc51addd3b75a2b1ae0784504df543af8969be3ea7082ff7fc9888c144da2"
+      "af58429ec96031dbcad3dad9af0dcbaaaf268cb8fcffead94f3c7ca495e056a9b47acdb7"
+      "51fb73e666c6c655ade8297297d07ad1ba5e43f1bca32301651339e22904cc8c42f58c30"
+      "c04aafdb038dda0847dd988dcda6f3bfd15c4b4c4525004aa06eeff8ca61783aacec57fb"
+      "3d1f92b0fe2fd1a85f6724517b65e614ad6808d6f6ee34dff7310fdc82aebfd904b01e1d"
+      "c54b2927094b2db68d6f903b68401adebf5a7e08d78ff4ef5d63653a65040cf9bfd4aca7"
+      "984a74d37145986780fc0b16ac451649de6188a7dbdf191f64b5fc5e2ab47b57f7f7276c"
+      "d419c17a3ca8e1b939ae49e488acba6b965610b5480109c8b17b80e1b7b750dfc7598d5d"
+      "5011fd2dcc5600a32ef5b52a1ecc820e308aa342721aac0943bf6686b64b2579376504cc"
+      "c493d97e6aed3fb0f9cd71a43dd497f01f17c0e2cb3797aa2a2f256656168e6c496afc5f"
+      "b93246f6b1116398a346f1a641f3b041e989f7914f90cc2c7fff357876e506b50d334ba7"
+      "7c225bc307ba537152f3f1610e4eafe595f6d9d90d11faa933a15ef1369546868a7f3a45"
+      "a96768d40fd9d03412c091c6315cf4fde7cb68606937380db2eaaa707b4c4185c32eddcd"
+      "d306705e4dc1ffc872eeee475a64dfac86aba41c0618983f8741c5ef68d3a101e8a3b8ca"
+      "c60c905c15fc910840b94c00a0b9d0",
+      "0AAB4C900501B3E24D7CDF4663326A3A87DF5E4843B2CBDB67CBF6E460FEC350AA5371B1"
+      "508F9F4528ECEA23C436D94B5E8FCD4F681E30A6AC00A9704A188A03");
+}
+TEST_F(EDDSATest, TestEd25519_Sign5) {
+  TestEd25519_Sign(
+      "833fe62409237b9d62ec77587520911e9a759cec1d19755b7da901b96dca3d42",
+      "ec172b93ad5e563bf4932c70e1245034c35467ef2efd4d64ebf819683467e2bf",
+      "ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a"
+      "274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f",
+      "DC2A4459E7369633A52B1BF277839A00201009A3EFBF3ECB69BEA2186C26B58909351FC9"
+      "AC90B3ECFDFBC7C66431E0303DCA179C138AC17AD9BEF1177331A704");
+}
+
+}  // nss_test
\ No newline at end of file
Index: gtests/freebl_gtest/freebl_gtest.gyp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gtests/freebl_gtest/freebl_gtest.gyp b/gtests/freebl_gtest/freebl_gtest.gyp
--- a/gtests/freebl_gtest/freebl_gtest.gyp	(revision 15898:f94b695d2232ef360868a2b56094fc1f00f060e9)
+++ b/gtests/freebl_gtest/freebl_gtest.gyp	(revision 15898+:f94b695d2232+)
@@ -36,6 +36,7 @@
         'ghash_unittest.cc',
         'rsa_unittest.cc',
         'cmac_unittests.cc',
+        'ed25519_unittest.cc',
         '<(DEPTH)/gtests/common/gtests.cc'
       ],
       'dependencies': [
Index: lib/freebl/verified/Hacl_Curve25519_51.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/freebl/verified/Hacl_Curve25519_51.c b/lib/freebl/verified/Hacl_Curve25519_51.c
--- a/lib/freebl/verified/Hacl_Curve25519_51.c	(revision 15898:f94b695d2232ef360868a2b56094fc1f00f060e9)
+++ b/lib/freebl/verified/Hacl_Curve25519_51.c	(revision 15898+:f94b695d2232+)
@@ -21,266 +21,274 @@
  * SOFTWARE.
  */
 
+
 #include "Hacl_Curve25519_51.h"
 
 static const uint8_t g25519[32U] = { (uint8_t)9U };
 
-static void
-point_add_and_double(uint64_t *q, uint64_t *p01_tmp1, FStar_UInt128_uint128 *tmp2)
+static void point_add_and_double(uint64_t *q, uint64_t *p01_tmp1, FStar_UInt128_uint128 *tmp2)
 {
-    uint64_t *nq = p01_tmp1;
-    uint64_t *nq_p1 = p01_tmp1 + (uint32_t)10U;
-    uint64_t *tmp1 = p01_tmp1 + (uint32_t)20U;
-    uint64_t *x1 = q;
-    uint64_t *x2 = nq;
-    uint64_t *z2 = nq + (uint32_t)5U;
-    uint64_t *z3 = nq_p1 + (uint32_t)5U;
-    uint64_t *a = tmp1;
-    uint64_t *b = tmp1 + (uint32_t)5U;
-    uint64_t *ab = tmp1;
-    uint64_t *dc = tmp1 + (uint32_t)10U;
-    Hacl_Impl_Curve25519_Field51_fadd(a, x2, z2);
-    Hacl_Impl_Curve25519_Field51_fsub(b, x2, z2);
-    uint64_t *x3 = nq_p1;
-    uint64_t *z31 = nq_p1 + (uint32_t)5U;
-    uint64_t *d0 = dc;
-    uint64_t *c0 = dc + (uint32_t)5U;
-    Hacl_Impl_Curve25519_Field51_fadd(c0, x3, z31);
-    Hacl_Impl_Curve25519_Field51_fsub(d0, x3, z31);
-    Hacl_Impl_Curve25519_Field51_fmul2(dc, dc, ab, tmp2);
-    Hacl_Impl_Curve25519_Field51_fadd(x3, d0, c0);
-    Hacl_Impl_Curve25519_Field51_fsub(z31, d0, c0);
-    uint64_t *a1 = tmp1;
-    uint64_t *b1 = tmp1 + (uint32_t)5U;
-    uint64_t *d = tmp1 + (uint32_t)10U;
-    uint64_t *c = tmp1 + (uint32_t)15U;
-    uint64_t *ab1 = tmp1;
-    uint64_t *dc1 = tmp1 + (uint32_t)10U;
-    Hacl_Impl_Curve25519_Field51_fsqr2(dc1, ab1, tmp2);
-    Hacl_Impl_Curve25519_Field51_fsqr2(nq_p1, nq_p1, tmp2);
-    a1[0U] = c[0U];
-    a1[1U] = c[1U];
-    a1[2U] = c[2U];
-    a1[3U] = c[3U];
-    a1[4U] = c[4U];
-    Hacl_Impl_Curve25519_Field51_fsub(c, d, c);
-    Hacl_Impl_Curve25519_Field51_fmul1(b1, c, (uint64_t)121665U);
-    Hacl_Impl_Curve25519_Field51_fadd(b1, b1, d);
-    Hacl_Impl_Curve25519_Field51_fmul2(nq, dc1, ab1, tmp2);
-    Hacl_Impl_Curve25519_Field51_fmul(z3, z3, x1, tmp2);
+  uint64_t *nq = p01_tmp1;
+  uint64_t *nq_p1 = p01_tmp1 + (uint32_t)10U;
+  uint64_t *tmp1 = p01_tmp1 + (uint32_t)20U;
+  uint64_t *x1 = q;
+  uint64_t *x2 = nq;
+  uint64_t *z2 = nq + (uint32_t)5U;
+  uint64_t *z3 = nq_p1 + (uint32_t)5U;
+  uint64_t *a = tmp1;
+  uint64_t *b = tmp1 + (uint32_t)5U;
+  uint64_t *ab = tmp1;
+  uint64_t *dc = tmp1 + (uint32_t)10U;
+  Hacl_Impl_Curve25519_Field51_fadd(a, x2, z2);
+  Hacl_Impl_Curve25519_Field51_fsub(b, x2, z2);
+  uint64_t *x3 = nq_p1;
+  uint64_t *z31 = nq_p1 + (uint32_t)5U;
+  uint64_t *d0 = dc;
+  uint64_t *c0 = dc + (uint32_t)5U;
+  Hacl_Impl_Curve25519_Field51_fadd(c0, x3, z31);
+  Hacl_Impl_Curve25519_Field51_fsub(d0, x3, z31);
+  Hacl_Impl_Curve25519_Field51_fmul2(dc, dc, ab, tmp2);
+  Hacl_Impl_Curve25519_Field51_fadd(x3, d0, c0);
+  Hacl_Impl_Curve25519_Field51_fsub(z31, d0, c0);
+  uint64_t *a1 = tmp1;
+  uint64_t *b1 = tmp1 + (uint32_t)5U;
+  uint64_t *d = tmp1 + (uint32_t)10U;
+  uint64_t *c = tmp1 + (uint32_t)15U;
+  uint64_t *ab1 = tmp1;
+  uint64_t *dc1 = tmp1 + (uint32_t)10U;
+  Hacl_Impl_Curve25519_Field51_fsqr2(dc1, ab1, tmp2);
+  Hacl_Impl_Curve25519_Field51_fsqr2(nq_p1, nq_p1, tmp2);
+  a1[0U] = c[0U];
+  a1[1U] = c[1U];
+  a1[2U] = c[2U];
+  a1[3U] = c[3U];
+  a1[4U] = c[4U];
+  Hacl_Impl_Curve25519_Field51_fsub(c, d, c);
+  Hacl_Impl_Curve25519_Field51_fmul1(b1, c, (uint64_t)121665U);
+  Hacl_Impl_Curve25519_Field51_fadd(b1, b1, d);
+  Hacl_Impl_Curve25519_Field51_fmul2(nq, dc1, ab1, tmp2);
+  Hacl_Impl_Curve25519_Field51_fmul(z3, z3, x1, tmp2);
 }
 
-static void
-point_double(uint64_t *nq, uint64_t *tmp1, FStar_UInt128_uint128 *tmp2)
+static void point_double(uint64_t *nq, uint64_t *tmp1, FStar_UInt128_uint128 *tmp2)
 {
-    uint64_t *x2 = nq;
-    uint64_t *z2 = nq + (uint32_t)5U;
-    uint64_t *a = tmp1;
-    uint64_t *b = tmp1 + (uint32_t)5U;
-    uint64_t *d = tmp1 + (uint32_t)10U;
-    uint64_t *c = tmp1 + (uint32_t)15U;
-    uint64_t *ab = tmp1;
-    uint64_t *dc = tmp1 + (uint32_t)10U;
-    Hacl_Impl_Curve25519_Field51_fadd(a, x2, z2);
-    Hacl_Impl_Curve25519_Field51_fsub(b, x2, z2);
-    Hacl_Impl_Curve25519_Field51_fsqr2(dc, ab, tmp2);
-    a[0U] = c[0U];
-    a[1U] = c[1U];
-    a[2U] = c[2U];
-    a[3U] = c[3U];
-    a[4U] = c[4U];
-    Hacl_Impl_Curve25519_Field51_fsub(c, d, c);
-    Hacl_Impl_Curve25519_Field51_fmul1(b, c, (uint64_t)121665U);
-    Hacl_Impl_Curve25519_Field51_fadd(b, b, d);
-    Hacl_Impl_Curve25519_Field51_fmul2(nq, dc, ab, tmp2);
+  uint64_t *x2 = nq;
+  uint64_t *z2 = nq + (uint32_t)5U;
+  uint64_t *a = tmp1;
+  uint64_t *b = tmp1 + (uint32_t)5U;
+  uint64_t *d = tmp1 + (uint32_t)10U;
+  uint64_t *c = tmp1 + (uint32_t)15U;
+  uint64_t *ab = tmp1;
+  uint64_t *dc = tmp1 + (uint32_t)10U;
+  Hacl_Impl_Curve25519_Field51_fadd(a, x2, z2);
+  Hacl_Impl_Curve25519_Field51_fsub(b, x2, z2);
+  Hacl_Impl_Curve25519_Field51_fsqr2(dc, ab, tmp2);
+  a[0U] = c[0U];
+  a[1U] = c[1U];
+  a[2U] = c[2U];
+  a[3U] = c[3U];
+  a[4U] = c[4U];
+  Hacl_Impl_Curve25519_Field51_fsub(c, d, c);
+  Hacl_Impl_Curve25519_Field51_fmul1(b, c, (uint64_t)121665U);
+  Hacl_Impl_Curve25519_Field51_fadd(b, b, d);
+  Hacl_Impl_Curve25519_Field51_fmul2(nq, dc, ab, tmp2);
 }
 
-static void
-montgomery_ladder(uint64_t *out, uint8_t *key, uint64_t *init)
+static void montgomery_ladder(uint64_t *out, uint8_t *key, uint64_t *init)
 {
-    FStar_UInt128_uint128 tmp2[10U];
-    for (uint32_t _i = 0U; _i < (uint32_t)10U; ++_i)
-        tmp2[_i] = FStar_UInt128_uint64_to_uint128((uint64_t)0U);
-    uint64_t p01_tmp1_swap[41U] = { 0U };
-    uint64_t *p0 = p01_tmp1_swap;
-    uint64_t *p01 = p01_tmp1_swap;
-    uint64_t *p03 = p01;
-    uint64_t *p11 = p01 + (uint32_t)10U;
-    memcpy(p11, init, (uint32_t)10U * sizeof(uint64_t));
-    uint64_t *x0 = p03;
-    uint64_t *z0 = p03 + (uint32_t)5U;
-    x0[0U] = (uint64_t)1U;
-    x0[1U] = (uint64_t)0U;
-    x0[2U] = (uint64_t)0U;
-    x0[3U] = (uint64_t)0U;
-    x0[4U] = (uint64_t)0U;
-    z0[0U] = (uint64_t)0U;
-    z0[1U] = (uint64_t)0U;
-    z0[2U] = (uint64_t)0U;
-    z0[3U] = (uint64_t)0U;
-    z0[4U] = (uint64_t)0U;
-    uint64_t *p01_tmp1 = p01_tmp1_swap;
-    uint64_t *p01_tmp11 = p01_tmp1_swap;
-    uint64_t *nq1 = p01_tmp1_swap;
-    uint64_t *nq_p11 = p01_tmp1_swap + (uint32_t)10U;
-    uint64_t *swap = p01_tmp1_swap + (uint32_t)40U;
-    Hacl_Impl_Curve25519_Field51_cswap2((uint64_t)1U, nq1, nq_p11);
-    point_add_and_double(init, p01_tmp11, tmp2);
-    swap[0U] = (uint64_t)1U;
-    for (uint32_t i = (uint32_t)0U; i < (uint32_t)251U; i++) {
-        uint64_t *p01_tmp12 = p01_tmp1_swap;
-        uint64_t *swap1 = p01_tmp1_swap + (uint32_t)40U;
-        uint64_t *nq2 = p01_tmp12;
-        uint64_t *nq_p12 = p01_tmp12 + (uint32_t)10U;
-        uint64_t
-            bit =
-                (uint64_t)(key[((uint32_t)253U - i) / (uint32_t)8U] >> ((uint32_t)253U - i) % (uint32_t)8U & (uint8_t)1U);
-        uint64_t sw = swap1[0U] ^ bit;
-        Hacl_Impl_Curve25519_Field51_cswap2(sw, nq2, nq_p12);
-        point_add_and_double(init, p01_tmp12, tmp2);
-        swap1[0U] = bit;
-    }
-    uint64_t sw = swap[0U];
-    Hacl_Impl_Curve25519_Field51_cswap2(sw, nq1, nq_p11);
-    uint64_t *nq10 = p01_tmp1;
-    uint64_t *tmp1 = p01_tmp1 + (uint32_t)20U;
-    point_double(nq10, tmp1, tmp2);
-    point_double(nq10, tmp1, tmp2);
-    point_double(nq10, tmp1, tmp2);
-    memcpy(out, p0, (uint32_t)10U * sizeof(uint64_t));
+  FStar_UInt128_uint128 tmp2[10U];
+  for (uint32_t _i = 0U; _i < (uint32_t)10U; ++_i)
+    tmp2[_i] = FStar_UInt128_uint64_to_uint128((uint64_t)0U);
+  uint64_t p01_tmp1_swap[41U] = { 0U };
+  uint64_t *p0 = p01_tmp1_swap;
+  uint64_t *p01 = p01_tmp1_swap;
+  uint64_t *p03 = p01;
+  uint64_t *p11 = p01 + (uint32_t)10U;
+  memcpy(p11, init, (uint32_t)10U * sizeof (uint64_t));
+  uint64_t *x0 = p03;
+  uint64_t *z0 = p03 + (uint32_t)5U;
+  x0[0U] = (uint64_t)1U;
+  x0[1U] = (uint64_t)0U;
+  x0[2U] = (uint64_t)0U;
+  x0[3U] = (uint64_t)0U;
+  x0[4U] = (uint64_t)0U;
+  z0[0U] = (uint64_t)0U;
+  z0[1U] = (uint64_t)0U;
+  z0[2U] = (uint64_t)0U;
+  z0[3U] = (uint64_t)0U;
+  z0[4U] = (uint64_t)0U;
+  uint64_t *p01_tmp1 = p01_tmp1_swap;
+  uint64_t *p01_tmp11 = p01_tmp1_swap;
+  uint64_t *nq1 = p01_tmp1_swap;
+  uint64_t *nq_p11 = p01_tmp1_swap + (uint32_t)10U;
+  uint64_t *swap = p01_tmp1_swap + (uint32_t)40U;
+  Hacl_Impl_Curve25519_Field51_cswap2((uint64_t)1U, nq1, nq_p11);
+  point_add_and_double(init, p01_tmp11, tmp2);
+  swap[0U] = (uint64_t)1U;
+  for (uint32_t i = (uint32_t)0U; i < (uint32_t)251U; i++)
+  {
+    uint64_t *p01_tmp12 = p01_tmp1_swap;
+    uint64_t *swap1 = p01_tmp1_swap + (uint32_t)40U;
+    uint64_t *nq2 = p01_tmp12;
+    uint64_t *nq_p12 = p01_tmp12 + (uint32_t)10U;
+    uint64_t
+    bit =
+      (uint64_t)(key[((uint32_t)253U - i)
+      / (uint32_t)8U]
+      >> ((uint32_t)253U - i) % (uint32_t)8U
+      & (uint8_t)1U);
+    uint64_t sw = swap1[0U] ^ bit;
+    Hacl_Impl_Curve25519_Field51_cswap2(sw, nq2, nq_p12);
+    point_add_and_double(init, p01_tmp12, tmp2);
+    swap1[0U] = bit;
+  }
+  uint64_t sw = swap[0U];
+  Hacl_Impl_Curve25519_Field51_cswap2(sw, nq1, nq_p11);
+  uint64_t *nq10 = p01_tmp1;
+  uint64_t *tmp1 = p01_tmp1 + (uint32_t)20U;
+  point_double(nq10, tmp1, tmp2);
+  point_double(nq10, tmp1, tmp2);
+  point_double(nq10, tmp1, tmp2);
+  memcpy(out, p0, (uint32_t)10U * sizeof (uint64_t));
 }
 
-static void
-fsquare_times(uint64_t *o, uint64_t *inp, FStar_UInt128_uint128 *tmp, uint32_t n)
+void
+Hacl_Curve25519_51_fsquare_times(
+  uint64_t *o,
+  uint64_t *inp,
+  FStar_UInt128_uint128 *tmp,
+  uint32_t n
+)
 {
-    Hacl_Impl_Curve25519_Field51_fsqr(o, inp, tmp);
-    for (uint32_t i = (uint32_t)0U; i < n - (uint32_t)1U; i++) {
-        Hacl_Impl_Curve25519_Field51_fsqr(o, o, tmp);
-    }
+  Hacl_Impl_Curve25519_Field51_fsqr(o, inp, tmp);
+  for (uint32_t i = (uint32_t)0U; i < n - (uint32_t)1U; i++)
+  {
+    Hacl_Impl_Curve25519_Field51_fsqr(o, o, tmp);
+  }
 }
 
-static void
-finv(uint64_t *o, uint64_t *i, FStar_UInt128_uint128 *tmp)
+void Hacl_Curve25519_51_finv(uint64_t *o, uint64_t *i, FStar_UInt128_uint128 *tmp)
 {
-    uint64_t t1[20U] = { 0U };
-    uint64_t *a1 = t1;
-    uint64_t *b1 = t1 + (uint32_t)5U;
-    uint64_t *t010 = t1 + (uint32_t)15U;
-    FStar_UInt128_uint128 *tmp10 = tmp;
-    fsquare_times(a1, i, tmp10, (uint32_t)1U);
-    fsquare_times(t010, a1, tmp10, (uint32_t)2U);
-    Hacl_Impl_Curve25519_Field51_fmul(b1, t010, i, tmp);
-    Hacl_Impl_Curve25519_Field51_fmul(a1, b1, a1, tmp);
-    fsquare_times(t010, a1, tmp10, (uint32_t)1U);
-    Hacl_Impl_Curve25519_Field51_fmul(b1, t010, b1, tmp);
-    fsquare_times(t010, b1, tmp10, (uint32_t)5U);
-    Hacl_Impl_Curve25519_Field51_fmul(b1, t010, b1, tmp);
-    uint64_t *b10 = t1 + (uint32_t)5U;
-    uint64_t *c10 = t1 + (uint32_t)10U;
-    uint64_t *t011 = t1 + (uint32_t)15U;
-    FStar_UInt128_uint128 *tmp11 = tmp;
-    fsquare_times(t011, b10, tmp11, (uint32_t)10U);
-    Hacl_Impl_Curve25519_Field51_fmul(c10, t011, b10, tmp);
-    fsquare_times(t011, c10, tmp11, (uint32_t)20U);
-    Hacl_Impl_Curve25519_Field51_fmul(t011, t011, c10, tmp);
-    fsquare_times(t011, t011, tmp11, (uint32_t)10U);
-    Hacl_Impl_Curve25519_Field51_fmul(b10, t011, b10, tmp);
-    fsquare_times(t011, b10, tmp11, (uint32_t)50U);
-    Hacl_Impl_Curve25519_Field51_fmul(c10, t011, b10, tmp);
-    uint64_t *b11 = t1 + (uint32_t)5U;
-    uint64_t *c1 = t1 + (uint32_t)10U;
-    uint64_t *t01 = t1 + (uint32_t)15U;
-    FStar_UInt128_uint128 *tmp1 = tmp;
-    fsquare_times(t01, c1, tmp1, (uint32_t)100U);
-    Hacl_Impl_Curve25519_Field51_fmul(t01, t01, c1, tmp);
-    fsquare_times(t01, t01, tmp1, (uint32_t)50U);
-    Hacl_Impl_Curve25519_Field51_fmul(t01, t01, b11, tmp);
-    fsquare_times(t01, t01, tmp1, (uint32_t)5U);
-    uint64_t *a = t1;
-    uint64_t *t0 = t1 + (uint32_t)15U;
-    Hacl_Impl_Curve25519_Field51_fmul(o, t0, a, tmp);
+  uint64_t t1[20U] = { 0U };
+  uint64_t *a1 = t1;
+  uint64_t *b1 = t1 + (uint32_t)5U;
+  uint64_t *t010 = t1 + (uint32_t)15U;
+  FStar_UInt128_uint128 *tmp10 = tmp;
+  Hacl_Curve25519_51_fsquare_times(a1, i, tmp10, (uint32_t)1U);
+  Hacl_Curve25519_51_fsquare_times(t010, a1, tmp10, (uint32_t)2U);
+  Hacl_Impl_Curve25519_Field51_fmul(b1, t010, i, tmp);
+  Hacl_Impl_Curve25519_Field51_fmul(a1, b1, a1, tmp);
+  Hacl_Curve25519_51_fsquare_times(t010, a1, tmp10, (uint32_t)1U);
+  Hacl_Impl_Curve25519_Field51_fmul(b1, t010, b1, tmp);
+  Hacl_Curve25519_51_fsquare_times(t010, b1, tmp10, (uint32_t)5U);
+  Hacl_Impl_Curve25519_Field51_fmul(b1, t010, b1, tmp);
+  uint64_t *b10 = t1 + (uint32_t)5U;
+  uint64_t *c10 = t1 + (uint32_t)10U;
+  uint64_t *t011 = t1 + (uint32_t)15U;
+  FStar_UInt128_uint128 *tmp11 = tmp;
+  Hacl_Curve25519_51_fsquare_times(t011, b10, tmp11, (uint32_t)10U);
+  Hacl_Impl_Curve25519_Field51_fmul(c10, t011, b10, tmp);
+  Hacl_Curve25519_51_fsquare_times(t011, c10, tmp11, (uint32_t)20U);
+  Hacl_Impl_Curve25519_Field51_fmul(t011, t011, c10, tmp);
+  Hacl_Curve25519_51_fsquare_times(t011, t011, tmp11, (uint32_t)10U);
+  Hacl_Impl_Curve25519_Field51_fmul(b10, t011, b10, tmp);
+  Hacl_Curve25519_51_fsquare_times(t011, b10, tmp11, (uint32_t)50U);
+  Hacl_Impl_Curve25519_Field51_fmul(c10, t011, b10, tmp);
+  uint64_t *b11 = t1 + (uint32_t)5U;
+  uint64_t *c1 = t1 + (uint32_t)10U;
+  uint64_t *t01 = t1 + (uint32_t)15U;
+  FStar_UInt128_uint128 *tmp1 = tmp;
+  Hacl_Curve25519_51_fsquare_times(t01, c1, tmp1, (uint32_t)100U);
+  Hacl_Impl_Curve25519_Field51_fmul(t01, t01, c1, tmp);
+  Hacl_Curve25519_51_fsquare_times(t01, t01, tmp1, (uint32_t)50U);
+  Hacl_Impl_Curve25519_Field51_fmul(t01, t01, b11, tmp);
+  Hacl_Curve25519_51_fsquare_times(t01, t01, tmp1, (uint32_t)5U);
+  uint64_t *a = t1;
+  uint64_t *t0 = t1 + (uint32_t)15U;
+  Hacl_Impl_Curve25519_Field51_fmul(o, t0, a, tmp);
 }
 
-static void
-encode_point(uint8_t *o, uint64_t *i)
+static void encode_point(uint8_t *o, uint64_t *i)
 {
-    uint64_t *x = i;
-    uint64_t *z = i + (uint32_t)5U;
-    uint64_t tmp[5U] = { 0U };
-    uint64_t u64s[4U] = { 0U };
-    FStar_UInt128_uint128 tmp_w[10U];
-    for (uint32_t _i = 0U; _i < (uint32_t)10U; ++_i)
-        tmp_w[_i] = FStar_UInt128_uint64_to_uint128((uint64_t)0U);
-    finv(tmp, z, tmp_w);
-    Hacl_Impl_Curve25519_Field51_fmul(tmp, tmp, x, tmp_w);
-    Hacl_Impl_Curve25519_Field51_store_felem(u64s, tmp);
-    for (uint32_t i0 = (uint32_t)0U; i0 < (uint32_t)4U; i0++) {
-        store64_le(o + i0 * (uint32_t)8U, u64s[i0]);
-    }
+  uint64_t *x = i;
+  uint64_t *z = i + (uint32_t)5U;
+  uint64_t tmp[5U] = { 0U };
+  uint64_t u64s[4U] = { 0U };
+  FStar_UInt128_uint128 tmp_w[10U];
+  for (uint32_t _i = 0U; _i < (uint32_t)10U; ++_i)
+    tmp_w[_i] = FStar_UInt128_uint64_to_uint128((uint64_t)0U);
+  Hacl_Curve25519_51_finv(tmp, z, tmp_w);
+  Hacl_Impl_Curve25519_Field51_fmul(tmp, tmp, x, tmp_w);
+  Hacl_Impl_Curve25519_Field51_store_felem(u64s, tmp);
+  for (uint32_t i0 = (uint32_t)0U; i0 < (uint32_t)4U; i0++)
+  {
+    store64_le(o + i0 * (uint32_t)8U, u64s[i0]);
+  }
 }
 
-void
-Hacl_Curve25519_51_scalarmult(uint8_t *out, uint8_t *priv, uint8_t *pub)
+void Hacl_Curve25519_51_scalarmult(uint8_t *out, uint8_t *priv, uint8_t *pub)
 {
-    uint64_t init[10U] = { 0U };
-    uint64_t tmp[4U] = { 0U };
-    for (uint32_t i = (uint32_t)0U; i < (uint32_t)4U; i++) {
-        uint64_t *os = tmp;
-        uint8_t *bj = pub + i * (uint32_t)8U;
-        uint64_t u = load64_le(bj);
-        uint64_t r = u;
-        uint64_t x = r;
-        os[i] = x;
-    }
-    uint64_t tmp3 = tmp[3U];
-    tmp[3U] = tmp3 & (uint64_t)0x7fffffffffffffffU;
-    uint64_t *x = init;
-    uint64_t *z = init + (uint32_t)5U;
-    z[0U] = (uint64_t)1U;
-    z[1U] = (uint64_t)0U;
-    z[2U] = (uint64_t)0U;
-    z[3U] = (uint64_t)0U;
-    z[4U] = (uint64_t)0U;
-    uint64_t f0l = tmp[0U] & (uint64_t)0x7ffffffffffffU;
-    uint64_t f0h = tmp[0U] >> (uint32_t)51U;
-    uint64_t f1l = (tmp[1U] & (uint64_t)0x3fffffffffU) << (uint32_t)13U;
-    uint64_t f1h = tmp[1U] >> (uint32_t)38U;
-    uint64_t f2l = (tmp[2U] & (uint64_t)0x1ffffffU) << (uint32_t)26U;
-    uint64_t f2h = tmp[2U] >> (uint32_t)25U;
-    uint64_t f3l = (tmp[3U] & (uint64_t)0xfffU) << (uint32_t)39U;
-    uint64_t f3h = tmp[3U] >> (uint32_t)12U;
-    x[0U] = f0l;
-    x[1U] = f0h | f1l;
-    x[2U] = f1h | f2l;
-    x[3U] = f2h | f3l;
-    x[4U] = f3h;
-    montgomery_ladder(init, priv, init);
-    encode_point(out, init);
+  uint64_t init[10U] = { 0U };
+  uint64_t tmp[4U] = { 0U };
+  for (uint32_t i = (uint32_t)0U; i < (uint32_t)4U; i++)
+  {
+    uint64_t *os = tmp;
+    uint8_t *bj = pub + i * (uint32_t)8U;
+    uint64_t u = load64_le(bj);
+    uint64_t r = u;
+    uint64_t x = r;
+    os[i] = x;
+  }
+  uint64_t tmp3 = tmp[3U];
+  tmp[3U] = tmp3 & (uint64_t)0x7fffffffffffffffU;
+  uint64_t *x = init;
+  uint64_t *z = init + (uint32_t)5U;
+  z[0U] = (uint64_t)1U;
+  z[1U] = (uint64_t)0U;
+  z[2U] = (uint64_t)0U;
+  z[3U] = (uint64_t)0U;
+  z[4U] = (uint64_t)0U;
+  uint64_t f0l = tmp[0U] & (uint64_t)0x7ffffffffffffU;
+  uint64_t f0h = tmp[0U] >> (uint32_t)51U;
+  uint64_t f1l = (tmp[1U] & (uint64_t)0x3fffffffffU) << (uint32_t)13U;
+  uint64_t f1h = tmp[1U] >> (uint32_t)38U;
+  uint64_t f2l = (tmp[2U] & (uint64_t)0x1ffffffU) << (uint32_t)26U;
+  uint64_t f2h = tmp[2U] >> (uint32_t)25U;
+  uint64_t f3l = (tmp[3U] & (uint64_t)0xfffU) << (uint32_t)39U;
+  uint64_t f3h = tmp[3U] >> (uint32_t)12U;
+  x[0U] = f0l;
+  x[1U] = f0h | f1l;
+  x[2U] = f1h | f2l;
+  x[3U] = f2h | f3l;
+  x[4U] = f3h;
+  montgomery_ladder(init, priv, init);
+  encode_point(out, init);
 }
 
-void
-Hacl_Curve25519_51_secret_to_public(uint8_t *pub, uint8_t *priv)
+void Hacl_Curve25519_51_secret_to_public(uint8_t *pub, uint8_t *priv)
 {
-    uint8_t basepoint[32U] = { 0U };
-    for (uint32_t i = (uint32_t)0U; i < (uint32_t)32U; i++) {
-        uint8_t *os = basepoint;
-        uint8_t x = g25519[i];
-        os[i] = x;
-    }
-    Hacl_Curve25519_51_scalarmult(pub, priv, basepoint);
+  uint8_t basepoint[32U] = { 0U };
+  for (uint32_t i = (uint32_t)0U; i < (uint32_t)32U; i++)
+  {
+    uint8_t *os = basepoint;
+    uint8_t x = g25519[i];
+    os[i] = x;
+  }
+  Hacl_Curve25519_51_scalarmult(pub, priv, basepoint);
 }
 
-bool
-Hacl_Curve25519_51_ecdh(uint8_t *out, uint8_t *priv, uint8_t *pub)
+bool Hacl_Curve25519_51_ecdh(uint8_t *out, uint8_t *priv, uint8_t *pub)
 {
-    uint8_t zeros[32U] = { 0U };
-    Hacl_Curve25519_51_scalarmult(out, priv, pub);
-    uint8_t res = (uint8_t)255U;
-    for (uint32_t i = (uint32_t)0U; i < (uint32_t)32U; i++) {
-        uint8_t uu____0 = FStar_UInt8_eq_mask(out[i], zeros[i]);
-        res = uu____0 & res;
-    }
-    uint8_t z = res;
-    bool r = z == (uint8_t)255U;
-    return !r;
+  uint8_t zeros[32U] = { 0U };
+  Hacl_Curve25519_51_scalarmult(out, priv, pub);
+  uint8_t res = (uint8_t)255U;
+  for (uint32_t i = (uint32_t)0U; i < (uint32_t)32U; i++)
+  {
+    uint8_t uu____0 = FStar_UInt8_eq_mask(out[i], zeros[i]);
+    res = uu____0 & res;
+  }
+  uint8_t z = res;
+  bool r = z == (uint8_t)255U;
+  return !r;
 }
+
Index: lib/freebl/verified/Hacl_Curve25519_51.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/freebl/verified/Hacl_Curve25519_51.h b/lib/freebl/verified/Hacl_Curve25519_51.h
--- a/lib/freebl/verified/Hacl_Curve25519_51.h	(revision 15898:f94b695d2232ef360868a2b56094fc1f00f060e9)
+++ b/lib/freebl/verified/Hacl_Curve25519_51.h	(revision 15898+:f94b695d2232+)
@@ -21,6 +21,7 @@
  * SOFTWARE.
  */
 
+
 #ifndef __Hacl_Curve25519_51_H
 #define __Hacl_Curve25519_51_H
 
@@ -28,14 +29,26 @@
 extern "C" {
 #endif
 
+#include "libintvector.h"
 #include "kremlin/internal/types.h"
 #include "kremlin/lowstar_endianness.h"
 #include <string.h>
-#include <stdbool.h>
+#include "kremlin/internal/target.h"
+
 
 #include "Hacl_Kremlib.h"
 #include "Hacl_Bignum25519_51.h"
 
+void
+Hacl_Curve25519_51_fsquare_times(
+  uint64_t *o,
+  uint64_t *inp,
+  FStar_UInt128_uint128 *tmp,
+  uint32_t n
+);
+
+void Hacl_Curve25519_51_finv(uint64_t *o, uint64_t *i, FStar_UInt128_uint128 *tmp);
+
 void Hacl_Curve25519_51_scalarmult(uint8_t *out, uint8_t *priv, uint8_t *pub);
 
 void Hacl_Curve25519_51_secret_to_public(uint8_t *pub, uint8_t *priv);
Index: lib/freebl/verified/Hacl_Ed25519.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/freebl/verified/Hacl_Ed25519.c b/lib/freebl/verified/Hacl_Ed25519.c
new file mode 100644
--- /dev/null	(revision 15898+:f94b695d2232+)
+++ b/lib/freebl/verified/Hacl_Ed25519.c	(revision 15898+:f94b695d2232+)
@@ -0,0 +1,1972 @@
+/* MIT License
+ *
+ * Copyright (c) 2016-2020 INRIA, CMU and Microsoft Corporation
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include "Hacl_Ed25519.h"
+
+static uint64_t
+k384_512[80U] =
+  {
+    (uint64_t)0x428a2f98d728ae22U, (uint64_t)0x7137449123ef65cdU, (uint64_t)0xb5c0fbcfec4d3b2fU,
+    (uint64_t)0xe9b5dba58189dbbcU, (uint64_t)0x3956c25bf348b538U, (uint64_t)0x59f111f1b605d019U,
+    (uint64_t)0x923f82a4af194f9bU, (uint64_t)0xab1c5ed5da6d8118U, (uint64_t)0xd807aa98a3030242U,
+    (uint64_t)0x12835b0145706fbeU, (uint64_t)0x243185be4ee4b28cU, (uint64_t)0x550c7dc3d5ffb4e2U,
+    (uint64_t)0x72be5d74f27b896fU, (uint64_t)0x80deb1fe3b1696b1U, (uint64_t)0x9bdc06a725c71235U,
+    (uint64_t)0xc19bf174cf692694U, (uint64_t)0xe49b69c19ef14ad2U, (uint64_t)0xefbe4786384f25e3U,
+    (uint64_t)0x0fc19dc68b8cd5b5U, (uint64_t)0x240ca1cc77ac9c65U, (uint64_t)0x2de92c6f592b0275U,
+    (uint64_t)0x4a7484aa6ea6e483U, (uint64_t)0x5cb0a9dcbd41fbd4U, (uint64_t)0x76f988da831153b5U,
+    (uint64_t)0x983e5152ee66dfabU, (uint64_t)0xa831c66d2db43210U, (uint64_t)0xb00327c898fb213fU,
+    (uint64_t)0xbf597fc7beef0ee4U, (uint64_t)0xc6e00bf33da88fc2U, (uint64_t)0xd5a79147930aa725U,
+    (uint64_t)0x06ca6351e003826fU, (uint64_t)0x142929670a0e6e70U, (uint64_t)0x27b70a8546d22ffcU,
+    (uint64_t)0x2e1b21385c26c926U, (uint64_t)0x4d2c6dfc5ac42aedU, (uint64_t)0x53380d139d95b3dfU,
+    (uint64_t)0x650a73548baf63deU, (uint64_t)0x766a0abb3c77b2a8U, (uint64_t)0x81c2c92e47edaee6U,
+    (uint64_t)0x92722c851482353bU, (uint64_t)0xa2bfe8a14cf10364U, (uint64_t)0xa81a664bbc423001U,
+    (uint64_t)0xc24b8b70d0f89791U, (uint64_t)0xc76c51a30654be30U, (uint64_t)0xd192e819d6ef5218U,
+    (uint64_t)0xd69906245565a910U, (uint64_t)0xf40e35855771202aU, (uint64_t)0x106aa07032bbd1b8U,
+    (uint64_t)0x19a4c116b8d2d0c8U, (uint64_t)0x1e376c085141ab53U, (uint64_t)0x2748774cdf8eeb99U,
+    (uint64_t)0x34b0bcb5e19b48a8U, (uint64_t)0x391c0cb3c5c95a63U, (uint64_t)0x4ed8aa4ae3418acbU,
+    (uint64_t)0x5b9cca4f7763e373U, (uint64_t)0x682e6ff3d6b2b8a3U, (uint64_t)0x748f82ee5defb2fcU,
+    (uint64_t)0x78a5636f43172f60U, (uint64_t)0x84c87814a1f0ab72U, (uint64_t)0x8cc702081a6439ecU,
+    (uint64_t)0x90befffa23631e28U, (uint64_t)0xa4506cebde82bde9U, (uint64_t)0xbef9a3f7b2c67915U,
+    (uint64_t)0xc67178f2e372532bU, (uint64_t)0xca273eceea26619cU, (uint64_t)0xd186b8c721c0c207U,
+    (uint64_t)0xeada7dd6cde0eb1eU, (uint64_t)0xf57d4f7fee6ed178U, (uint64_t)0x06f067aa72176fbaU,
+    (uint64_t)0x0a637dc5a2c898a6U, (uint64_t)0x113f9804bef90daeU, (uint64_t)0x1b710b35131c471bU,
+    (uint64_t)0x28db77f523047d84U, (uint64_t)0x32caab7b40c72493U, (uint64_t)0x3c9ebe0a15c9bebcU,
+    (uint64_t)0x431d67c49c100d4cU, (uint64_t)0x4cc5d4becb3e42b6U, (uint64_t)0x597f299cfc657e2aU,
+    (uint64_t)0x5fcb6fab3ad6faecU, (uint64_t)0x6c44198c4a475817U
+  };
+
+void Hacl_Hash_Core_SHA2_update_512(uint64_t *hash, uint8_t *block)
+{
+  uint64_t hash1[8U] = { 0U };
+  uint64_t computed_ws[80U] = { 0U };
+  for (uint32_t i = (uint32_t)0U; i < (uint32_t)80U; i++)
+  {
+    if (i < (uint32_t)16U)
+    {
+      uint8_t *b = block + i * (uint32_t)8U;
+      uint64_t u = load64_be(b);
+      computed_ws[i] = u;
+    }
+    else
+    {
+      uint64_t t16 = computed_ws[i - (uint32_t)16U];
+      uint64_t t15 = computed_ws[i - (uint32_t)15U];
+      uint64_t t7 = computed_ws[i - (uint32_t)7U];
+      uint64_t t2 = computed_ws[i - (uint32_t)2U];
+      uint64_t
+      s1 =
+        (t2 >> (uint32_t)19U | t2 << (uint32_t)45U)
+        ^ ((t2 >> (uint32_t)61U | t2 << (uint32_t)3U) ^ t2 >> (uint32_t)6U);
+      uint64_t
+      s0 =
+        (t15 >> (uint32_t)1U | t15 << (uint32_t)63U)
+        ^ ((t15 >> (uint32_t)8U | t15 << (uint32_t)56U) ^ t15 >> (uint32_t)7U);
+      uint64_t w = s1 + t7 + s0 + t16;
+      computed_ws[i] = w;
+    }
+  }
+  memcpy(hash1, hash, (uint32_t)8U * sizeof (uint64_t));
+  for (uint32_t i = (uint32_t)0U; i < (uint32_t)80U; i++)
+  {
+    uint64_t a0 = hash1[0U];
+    uint64_t b0 = hash1[1U];
+    uint64_t c0 = hash1[2U];
+    uint64_t d0 = hash1[3U];
+    uint64_t e0 = hash1[4U];
+    uint64_t f0 = hash1[5U];
+    uint64_t g0 = hash1[6U];
+    uint64_t h02 = hash1[7U];
+    uint64_t w = computed_ws[i];
+    uint64_t
+    t1 =
+      h02
+      +
+        ((e0 >> (uint32_t)14U | e0 << (uint32_t)50U)
+        ^
+          ((e0 >> (uint32_t)18U | e0 << (uint32_t)46U)
+          ^ (e0 >> (uint32_t)41U | e0 << (uint32_t)23U)))
+      + ((e0 & f0) ^ (~e0 & g0))
+      + k384_512[i]
+      + w;
+    uint64_t
+    t2 =
+      ((a0 >> (uint32_t)28U | a0 << (uint32_t)36U)
+      ^ ((a0 >> (uint32_t)34U | a0 << (uint32_t)30U) ^ (a0 >> (uint32_t)39U | a0 << (uint32_t)25U)))
+      + ((a0 & b0) ^ ((a0 & c0) ^ (b0 & c0)));
+    hash1[0U] = t1 + t2;
+    hash1[1U] = a0;
+    hash1[2U] = b0;
+    hash1[3U] = c0;
+    hash1[4U] = d0 + t1;
+    hash1[5U] = e0;
+    hash1[6U] = f0;
+    hash1[7U] = g0;
+  }
+  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i++)
+  {
+    uint64_t xi = hash[i];
+    uint64_t yi = hash1[i];
+    hash[i] = xi + yi;
+  }
+}
+
+void Hacl_Hash_Core_SHA2_pad_512(FStar_UInt128_uint128 len, uint8_t *dst)
+{
+  uint8_t *dst1 = dst;
+  dst1[0U] = (uint8_t)0x80U;
+  uint8_t *dst2 = dst + (uint32_t)1U;
+  for
+  (uint32_t
+    i = (uint32_t)0U;
+    i
+    <
+      ((uint32_t)256U
+      -
+        ((uint32_t)17U
+        + (uint32_t)(FStar_UInt128_uint128_to_uint64(len) % (uint64_t)(uint32_t)128U)))
+      % (uint32_t)128U;
+    i++)
+  {
+    dst2[i] = (uint8_t)0U;
+  }
+  uint8_t
+  *dst3 =
+    dst
+    +
+      (uint32_t)1U
+      +
+        ((uint32_t)256U
+        -
+          ((uint32_t)17U
+          + (uint32_t)(FStar_UInt128_uint128_to_uint64(len) % (uint64_t)(uint32_t)128U)))
+        % (uint32_t)128U;
+  FStar_UInt128_uint128 len_ = FStar_UInt128_shift_left(len, (uint32_t)3U);
+  store128_be(dst3, len_);
+}
+
+void Hacl_Hash_SHA2_update_multi_512(uint64_t *s, uint8_t *blocks, uint32_t n_blocks)
+{
+  for (uint32_t i = (uint32_t)0U; i < n_blocks; i++)
+  {
+    uint32_t sz = (uint32_t)128U;
+    uint8_t *block = blocks + sz * i;
+    Hacl_Hash_Core_SHA2_update_512(s, block);
+  }
+}
+
+void
+Hacl_Hash_SHA2_update_last_512(
+  uint64_t *s,
+  FStar_UInt128_uint128 prev_len,
+  uint8_t *input,
+  uint32_t input_len
+)
+{
+  uint32_t blocks_n = input_len / (uint32_t)128U;
+  uint32_t blocks_len = blocks_n * (uint32_t)128U;
+  uint8_t *blocks = input;
+  uint32_t rest_len = input_len - blocks_len;
+  uint8_t *rest = input + blocks_len;
+  Hacl_Hash_SHA2_update_multi_512(s, blocks, blocks_n);
+  FStar_UInt128_uint128
+  total_input_len =
+    FStar_UInt128_add(prev_len,
+      FStar_UInt128_uint64_to_uint128((uint64_t)input_len));
+  uint32_t
+  pad_len =
+    (uint32_t)1U
+    +
+      ((uint32_t)256U
+      -
+        ((uint32_t)17U
+        + (uint32_t)(FStar_UInt128_uint128_to_uint64(total_input_len) % (uint64_t)(uint32_t)128U)))
+      % (uint32_t)128U
+    + (uint32_t)16U;
+  uint32_t tmp_len = rest_len + pad_len;
+  uint8_t tmp_twoblocks[256U] = { 0U };
+  uint8_t *tmp = tmp_twoblocks;
+  uint8_t *tmp_rest = tmp;
+  uint8_t *tmp_pad = tmp + rest_len;
+  memcpy(tmp_rest, rest, rest_len * sizeof (uint8_t));
+  Hacl_Hash_Core_SHA2_pad_512(total_input_len, tmp_pad);
+  Hacl_Hash_SHA2_update_multi_512(s, tmp, tmp_len / (uint32_t)128U);
+}
+
+void Hacl_Hash_Core_SHA2_finish_512(uint64_t *s, uint8_t *dst)
+{
+  uint64_t *uu____0 = s;
+  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i++)
+  {
+    store64_be(dst + i * (uint32_t)8U, uu____0[i]);
+  }
+}
+
+void Hacl_Hash_SHA2_hash_512(uint8_t *input, uint32_t input_len, uint8_t *dst)
+{
+  uint64_t
+  scrut[8U] =
+    {
+      (uint64_t)0x6a09e667f3bcc908U, (uint64_t)0xbb67ae8584caa73bU, (uint64_t)0x3c6ef372fe94f82bU,
+      (uint64_t)0xa54ff53a5f1d36f1U, (uint64_t)0x510e527fade682d1U, (uint64_t)0x9b05688c2b3e6c1fU,
+      (uint64_t)0x1f83d9abfb41bd6bU, (uint64_t)0x5be0cd19137e2179U
+    };
+  uint64_t *s = scrut;
+  uint32_t blocks_n0 = input_len / (uint32_t)128U;
+  uint32_t blocks_n1;
+  if (input_len % (uint32_t)128U == (uint32_t)0U && blocks_n0 > (uint32_t)0U)
+  {
+    blocks_n1 = blocks_n0 - (uint32_t)1U;
+  }
+  else
+  {
+    blocks_n1 = blocks_n0;
+  }
+  uint32_t blocks_len0 = blocks_n1 * (uint32_t)128U;
+  uint8_t *blocks0 = input;
+  uint32_t rest_len0 = input_len - blocks_len0;
+  uint8_t *rest0 = input + blocks_len0;
+  uint32_t blocks_n = blocks_n1;
+  uint32_t blocks_len = blocks_len0;
+  uint8_t *blocks = blocks0;
+  uint32_t rest_len = rest_len0;
+  uint8_t *rest = rest0;
+  Hacl_Hash_SHA2_update_multi_512(s, blocks, blocks_n);
+  Hacl_Hash_SHA2_update_last_512(s,
+    FStar_UInt128_uint64_to_uint128((uint64_t)blocks_len),
+    rest,
+    rest_len);
+  Hacl_Hash_Core_SHA2_finish_512(s, dst);
+}
+
+
+static inline void fsum(uint64_t *a, uint64_t *b)
+{
+  Hacl_Impl_Curve25519_Field51_fadd(a, a, b);
+}
+
+static inline void fdifference(uint64_t *a, uint64_t *b)
+{
+  Hacl_Impl_Curve25519_Field51_fsub(a, b, a);
+}
+
+void Hacl_Bignum25519_reduce_513(uint64_t *a)
+{
+  uint64_t f0 = a[0U];
+  uint64_t f1 = a[1U];
+  uint64_t f2 = a[2U];
+  uint64_t f3 = a[3U];
+  uint64_t f4 = a[4U];
+  uint64_t l_ = f0 + (uint64_t)0U;
+  uint64_t tmp0 = l_ & (uint64_t)0x7ffffffffffffU;
+  uint64_t c0 = l_ >> (uint32_t)51U;
+  uint64_t l_0 = f1 + c0;
+  uint64_t tmp1 = l_0 & (uint64_t)0x7ffffffffffffU;
+  uint64_t c1 = l_0 >> (uint32_t)51U;
+  uint64_t l_1 = f2 + c1;
+  uint64_t tmp2 = l_1 & (uint64_t)0x7ffffffffffffU;
+  uint64_t c2 = l_1 >> (uint32_t)51U;
+  uint64_t l_2 = f3 + c2;
+  uint64_t tmp3 = l_2 & (uint64_t)0x7ffffffffffffU;
+  uint64_t c3 = l_2 >> (uint32_t)51U;
+  uint64_t l_3 = f4 + c3;
+  uint64_t tmp4 = l_3 & (uint64_t)0x7ffffffffffffU;
+  uint64_t c4 = l_3 >> (uint32_t)51U;
+  uint64_t l_4 = tmp0 + c4 * (uint64_t)19U;
+  uint64_t tmp0_ = l_4 & (uint64_t)0x7ffffffffffffU;
+  uint64_t c5 = l_4 >> (uint32_t)51U;
+  a[0U] = tmp0_;
+  a[1U] = tmp1 + c5;
+  a[2U] = tmp2;
+  a[3U] = tmp3;
+  a[4U] = tmp4;
+}
+
+static inline void fmul0(uint64_t *output, uint64_t *input, uint64_t *input2)
+{
+  FStar_UInt128_uint128 tmp[10U];
+  for (uint32_t _i = 0U; _i < (uint32_t)10U; ++_i)
+    tmp[_i] = FStar_UInt128_uint64_to_uint128((uint64_t)0U);
+  Hacl_Impl_Curve25519_Field51_fmul(output, input, input2, tmp);
+}
+
+static inline void times_2(uint64_t *out, uint64_t *a)
+{
+  uint64_t a0 = a[0U];
+  uint64_t a1 = a[1U];
+  uint64_t a2 = a[2U];
+  uint64_t a3 = a[3U];
+  uint64_t a4 = a[4U];
+  uint64_t o0 = (uint64_t)2U * a0;
+  uint64_t o1 = (uint64_t)2U * a1;
+  uint64_t o2 = (uint64_t)2U * a2;
+  uint64_t o3 = (uint64_t)2U * a3;
+  uint64_t o4 = (uint64_t)2U * a4;
+  out[0U] = o0;
+  out[1U] = o1;
+  out[2U] = o2;
+  out[3U] = o3;
+  out[4U] = o4;
+}
+
+static inline void times_d(uint64_t *out, uint64_t *a)
+{
+  uint64_t d[5U] = { 0U };
+  d[0U] = (uint64_t)0x00034dca135978a3U;
+  d[1U] = (uint64_t)0x0001a8283b156ebdU;
+  d[2U] = (uint64_t)0x0005e7a26001c029U;
+  d[3U] = (uint64_t)0x000739c663a03cbbU;
+  d[4U] = (uint64_t)0x00052036cee2b6ffU;
+  fmul0(out, d, a);
+}
+
+static inline void times_2d(uint64_t *out, uint64_t *a)
+{
+  uint64_t d2[5U] = { 0U };
+  d2[0U] = (uint64_t)0x00069b9426b2f159U;
+  d2[1U] = (uint64_t)0x00035050762add7aU;
+  d2[2U] = (uint64_t)0x0003cf44c0038052U;
+  d2[3U] = (uint64_t)0x0006738cc7407977U;
+  d2[4U] = (uint64_t)0x0002406d9dc56dffU;
+  fmul0(out, d2, a);
+}
+
+static inline void fsquare(uint64_t *out, uint64_t *a)
+{
+  FStar_UInt128_uint128 tmp[5U];
+  for (uint32_t _i = 0U; _i < (uint32_t)5U; ++_i)
+    tmp[_i] = FStar_UInt128_uint64_to_uint128((uint64_t)0U);
+  Hacl_Impl_Curve25519_Field51_fsqr(out, a, tmp);
+}
+
+
+static inline void fsquare_times(uint64_t *output, uint64_t *input, uint32_t count)
+{
+  FStar_UInt128_uint128 tmp[5U];
+  for (uint32_t _i = 0U; _i < (uint32_t)5U; ++_i)
+    tmp[_i] = FStar_UInt128_uint64_to_uint128((uint64_t)0U);
+  Hacl_Curve25519_51_fsquare_times(output, input, tmp, count);
+}
+
+static inline void fsquare_times_inplace(uint64_t *output, uint32_t count)
+{
+  FStar_UInt128_uint128 tmp[5U];
+  for (uint32_t _i = 0U; _i < (uint32_t)5U; ++_i)
+    tmp[_i] = FStar_UInt128_uint64_to_uint128((uint64_t)0U);
+  Hacl_Curve25519_51_fsquare_times(output, output, tmp, count);
+}
+
+void Hacl_Bignum25519_inverse(uint64_t *out, uint64_t *a)
+{
+  FStar_UInt128_uint128 tmp[10U];
+  for (uint32_t _i = 0U; _i < (uint32_t)10U; ++_i)
+    tmp[_i] = FStar_UInt128_uint64_to_uint128((uint64_t)0U);
+  Hacl_Curve25519_51_finv(out, a, tmp);
+}
+
+static inline void reduce(uint64_t *out)
+{
+  uint64_t o0 = out[0U];
+  uint64_t o1 = out[1U];
+  uint64_t o2 = out[2U];
+  uint64_t o3 = out[3U];
+  uint64_t o4 = out[4U];
+  uint64_t l_ = o0 + (uint64_t)0U;
+  uint64_t tmp0 = l_ & (uint64_t)0x7ffffffffffffU;
+  uint64_t c0 = l_ >> (uint32_t)51U;
+  uint64_t l_0 = o1 + c0;
+  uint64_t tmp1 = l_0 & (uint64_t)0x7ffffffffffffU;
+  uint64_t c1 = l_0 >> (uint32_t)51U;
+  uint64_t l_1 = o2 + c1;
+  uint64_t tmp2 = l_1 & (uint64_t)0x7ffffffffffffU;
+  uint64_t c2 = l_1 >> (uint32_t)51U;
+  uint64_t l_2 = o3 + c2;
+  uint64_t tmp3 = l_2 & (uint64_t)0x7ffffffffffffU;
+  uint64_t c3 = l_2 >> (uint32_t)51U;
+  uint64_t l_3 = o4 + c3;
+  uint64_t tmp4 = l_3 & (uint64_t)0x7ffffffffffffU;
+  uint64_t c4 = l_3 >> (uint32_t)51U;
+  uint64_t l_4 = tmp0 + c4 * (uint64_t)19U;
+  uint64_t tmp0_ = l_4 & (uint64_t)0x7ffffffffffffU;
+  uint64_t c5 = l_4 >> (uint32_t)51U;
+  uint64_t f0 = tmp0_;
+  uint64_t f1 = tmp1 + c5;
+  uint64_t f2 = tmp2;
+  uint64_t f3 = tmp3;
+  uint64_t f4 = tmp4;
+  uint64_t m0 = FStar_UInt64_gte_mask(f0, (uint64_t)0x7ffffffffffedU);
+  uint64_t m1 = FStar_UInt64_eq_mask(f1, (uint64_t)0x7ffffffffffffU);
+  uint64_t m2 = FStar_UInt64_eq_mask(f2, (uint64_t)0x7ffffffffffffU);
+  uint64_t m3 = FStar_UInt64_eq_mask(f3, (uint64_t)0x7ffffffffffffU);
+  uint64_t m4 = FStar_UInt64_eq_mask(f4, (uint64_t)0x7ffffffffffffU);
+  uint64_t mask = (((m0 & m1) & m2) & m3) & m4;
+  uint64_t f0_ = f0 - (mask & (uint64_t)0x7ffffffffffedU);
+  uint64_t f1_ = f1 - (mask & (uint64_t)0x7ffffffffffffU);
+  uint64_t f2_ = f2 - (mask & (uint64_t)0x7ffffffffffffU);
+  uint64_t f3_ = f3 - (mask & (uint64_t)0x7ffffffffffffU);
+  uint64_t f4_ = f4 - (mask & (uint64_t)0x7ffffffffffffU);
+  uint64_t f01 = f0_;
+  uint64_t f11 = f1_;
+  uint64_t f21 = f2_;
+  uint64_t f31 = f3_;
+  uint64_t f41 = f4_;
+  out[0U] = f01;
+  out[1U] = f11;
+  out[2U] = f21;
+  out[3U] = f31;
+  out[4U] = f41;
+}
+
+void Hacl_Bignum25519_load_51(uint64_t *output, uint8_t *input)
+{
+  uint64_t u64s[4U] = { 0U };
+  for (uint32_t i = (uint32_t)0U; i < (uint32_t)4U; i++)
+  {
+    uint64_t *os = u64s;
+    uint8_t *bj = input + i * (uint32_t)8U;
+    uint64_t u = load64_le(bj);
+    uint64_t r = u;
+    uint64_t x = r;
+    os[i] = x;
+  }
+  uint64_t u64s3 = u64s[3U];
+  u64s[3U] = u64s3 & (uint64_t)0x7fffffffffffffffU;
+  output[0U] = u64s[0U] & (uint64_t)0x7ffffffffffffU;
+  output[1U] = u64s[0U] >> (uint32_t)51U | (u64s[1U] & (uint64_t)0x3fffffffffU) << (uint32_t)13U;
+  output[2U] = u64s[1U] >> (uint32_t)38U | (u64s[2U] & (uint64_t)0x1ffffffU) << (uint32_t)26U;
+  output[3U] = u64s[2U] >> (uint32_t)25U | (u64s[3U] & (uint64_t)0xfffU) << (uint32_t)39U;
+  output[4U] = u64s[3U] >> (uint32_t)12U;
+}
+
+void Hacl_Bignum25519_store_51(uint8_t *output, uint64_t *input)
+{
+  uint64_t u64s[4U] = { 0U };
+  Hacl_Impl_Curve25519_Field51_store_felem(u64s, input);
+  for (uint32_t i = (uint32_t)0U; i < (uint32_t)4U; i++)
+  {
+    store64_le(output + i * (uint32_t)8U, u64s[i]);
+  }
+}
+
+void Hacl_Impl_Ed25519_PointAdd_point_add(uint64_t *out, uint64_t *p, uint64_t *q)
+{
+  uint64_t tmp[30U] = { 0U };
+  uint64_t *tmp1 = tmp;
+  uint64_t *tmp20 = tmp + (uint32_t)5U;
+  uint64_t *tmp30 = tmp + (uint32_t)10U;
+  uint64_t *tmp40 = tmp + (uint32_t)15U;
+  uint64_t *x1 = p;
+  uint64_t *y1 = p + (uint32_t)5U;
+  uint64_t *x2 = q;
+  uint64_t *y2 = q + (uint32_t)5U;
+  memcpy(tmp1, x1, (uint32_t)5U * sizeof (uint64_t));
+  memcpy(tmp20, x2, (uint32_t)5U * sizeof (uint64_t));
+  fdifference(tmp1, y1);
+  fdifference(tmp20, y2);
+  fmul0(tmp30, tmp1, tmp20);
+  memcpy(tmp1, y1, (uint32_t)5U * sizeof (uint64_t));
+  memcpy(tmp20, y2, (uint32_t)5U * sizeof (uint64_t));
+  fsum(tmp1, x1);
+  fsum(tmp20, x2);
+  fmul0(tmp40, tmp1, tmp20);
+  uint64_t *tmp10 = tmp;
+  uint64_t *tmp2 = tmp + (uint32_t)5U;
+  uint64_t *tmp3 = tmp + (uint32_t)10U;
+  uint64_t *tmp41 = tmp + (uint32_t)15U;
+  uint64_t *tmp50 = tmp + (uint32_t)20U;
+  uint64_t *tmp60 = tmp + (uint32_t)25U;
+  uint64_t *z1 = p + (uint32_t)10U;
+  uint64_t *t1 = p + (uint32_t)15U;
+  uint64_t *z2 = q + (uint32_t)10U;
+  uint64_t *t2 = q + (uint32_t)15U;
+  times_2d(tmp10, t1);
+  fmul0(tmp2, tmp10, t2);
+  times_2(tmp10, z1);
+  fmul0(tmp50, tmp10, z2);
+  memcpy(tmp10, tmp3, (uint32_t)5U * sizeof (uint64_t));
+  memcpy(tmp60, tmp2, (uint32_t)5U * sizeof (uint64_t));
+  fdifference(tmp10, tmp41);
+  fdifference(tmp60, tmp50);
+  fsum(tmp50, tmp2);
+  fsum(tmp41, tmp3);
+  uint64_t *tmp11 = tmp;
+  uint64_t *tmp4 = tmp + (uint32_t)15U;
+  uint64_t *tmp5 = tmp + (uint32_t)20U;
+  uint64_t *tmp6 = tmp + (uint32_t)25U;
+  uint64_t *x3 = out;
+  uint64_t *y3 = out + (uint32_t)5U;
+  uint64_t *z3 = out + (uint32_t)10U;
+  uint64_t *t3 = out + (uint32_t)15U;
+  fmul0(x3, tmp11, tmp6);
+  fmul0(y3, tmp5, tmp4);
+  fmul0(t3, tmp11, tmp4);
+  fmul0(z3, tmp6, tmp5);
+}
+
+static inline void point_double(uint64_t *out, uint64_t *p)
+{
+  uint64_t tmp[30U] = { 0U };
+  uint64_t *tmp2 = tmp + (uint32_t)5U;
+  uint64_t *tmp3 = tmp + (uint32_t)10U;
+  uint64_t *tmp4 = tmp + (uint32_t)15U;
+  uint64_t *tmp6 = tmp + (uint32_t)25U;
+  uint64_t *x3 = out;
+  uint64_t *y3 = out + (uint32_t)5U;
+  uint64_t *z3 = out + (uint32_t)10U;
+  uint64_t *t3 = out + (uint32_t)15U;
+  uint64_t *tmp11 = tmp;
+  uint64_t *tmp210 = tmp + (uint32_t)5U;
+  uint64_t *tmp310 = tmp + (uint32_t)10U;
+  uint64_t *tmp410 = tmp + (uint32_t)15U;
+  uint64_t *x10 = p;
+  uint64_t *y10 = p + (uint32_t)5U;
+  uint64_t *z1 = p + (uint32_t)10U;
+  fsquare(tmp11, x10);
+  fsquare(tmp210, y10);
+  fsquare(tmp310, z1);
+  times_2(tmp410, tmp310);
+  memcpy(tmp310, tmp11, (uint32_t)5U * sizeof (uint64_t));
+  fsum(tmp310, tmp210);
+  uint64_t *tmp110 = tmp;
+  uint64_t *tmp21 = tmp + (uint32_t)5U;
+  uint64_t *tmp31 = tmp + (uint32_t)10U;
+  uint64_t *tmp41 = tmp + (uint32_t)15U;
+  uint64_t *tmp51 = tmp + (uint32_t)20U;
+  uint64_t *tmp61 = tmp + (uint32_t)25U;
+  uint64_t *x1 = p;
+  uint64_t *y1 = p + (uint32_t)5U;
+  memcpy(tmp51, x1, (uint32_t)5U * sizeof (uint64_t));
+  fsum(tmp51, y1);
+  fsquare(tmp61, tmp51);
+  memcpy(tmp51, tmp31, (uint32_t)5U * sizeof (uint64_t));
+  Hacl_Bignum25519_reduce_513(tmp51);
+  fdifference(tmp61, tmp51);
+  fdifference(tmp21, tmp110);
+  Hacl_Bignum25519_reduce_513(tmp21);
+  Hacl_Bignum25519_reduce_513(tmp41);
+  fsum(tmp41, tmp21);
+  fmul0(x3, tmp4, tmp6);
+  fmul0(y3, tmp2, tmp3);
+  fmul0(t3, tmp6, tmp3);
+  fmul0(z3, tmp4, tmp2);
+}
+
+static inline void
+swap_conditional_step(uint64_t *a_, uint64_t *b_, uint64_t *a, uint64_t *b, uint64_t swap)
+{
+  uint64_t a0 = a[0U];
+  uint64_t a1 = a[1U];
+  uint64_t a2 = a[2U];
+  uint64_t a3 = a[3U];
+  uint64_t a4 = a[4U];
+  uint64_t b0 = b[0U];
+  uint64_t b1 = b[1U];
+  uint64_t b2 = b[2U];
+  uint64_t b3 = b[3U];
+  uint64_t b4 = b[4U];
+  uint64_t x0 = (a0 ^ b0) & swap;
+  uint64_t x1 = (a1 ^ b1) & swap;
+  uint64_t x2 = (a2 ^ b2) & swap;
+  uint64_t x3 = (a3 ^ b3) & swap;
+  uint64_t x4 = (a4 ^ b4) & swap;
+  a_[0U] = a0 ^ x0;
+  b_[0U] = b0 ^ x0;
+  a_[1U] = a1 ^ x1;
+  b_[1U] = b1 ^ x1;
+  a_[2U] = a2 ^ x2;
+  b_[2U] = b2 ^ x2;
+  a_[3U] = a3 ^ x3;
+  b_[3U] = b3 ^ x3;
+  a_[4U] = a4 ^ x4;
+  b_[4U] = b4 ^ x4;
+}
+
+static inline void
+swap_conditional(uint64_t *a_, uint64_t *b_, uint64_t *a, uint64_t *b, uint64_t iswap)
+{
+  uint64_t swap = (uint64_t)0U - iswap;
+  swap_conditional_step(a_, b_, a, b, swap);
+  swap_conditional_step(a_ + (uint32_t)5U,
+    b_ + (uint32_t)5U,
+    a + (uint32_t)5U,
+    b + (uint32_t)5U,
+    swap);
+  swap_conditional_step(a_ + (uint32_t)10U,
+    b_ + (uint32_t)10U,
+    a + (uint32_t)10U,
+    b + (uint32_t)10U,
+    swap);
+  swap_conditional_step(a_ + (uint32_t)15U,
+    b_ + (uint32_t)15U,
+    a + (uint32_t)15U,
+    b + (uint32_t)15U,
+    swap);
+}
+
+static inline void swap_conditional_inplace(uint64_t *a, uint64_t *b, uint64_t iswap)
+{
+  uint64_t swap = (uint64_t)0U - iswap;
+  swap_conditional_step(a, b, a, b, swap);
+  swap_conditional_step(a + (uint32_t)5U,
+    b + (uint32_t)5U,
+    a + (uint32_t)5U,
+    b + (uint32_t)5U,
+    swap);
+  swap_conditional_step(a + (uint32_t)10U,
+    b + (uint32_t)10U,
+    a + (uint32_t)10U,
+    b + (uint32_t)10U,
+    swap);
+  swap_conditional_step(a + (uint32_t)15U,
+    b + (uint32_t)15U,
+    a + (uint32_t)15U,
+    b + (uint32_t)15U,
+    swap);
+}
+
+void Hacl_Impl_Ed25519_Ladder_point_mul(uint64_t *result, uint8_t *scalar, uint64_t *q)
+{
+  uint64_t b[80U] = { 0U };
+  uint64_t *nq = b;
+  uint64_t *nqpq = b + (uint32_t)20U;
+  uint64_t *x = nq;
+  uint64_t *y = nq + (uint32_t)5U;
+  uint64_t *z = nq + (uint32_t)10U;
+  uint64_t *t = nq + (uint32_t)15U;
+  x[0U] = (uint64_t)0U;
+  x[1U] = (uint64_t)0U;
+  x[2U] = (uint64_t)0U;
+  x[3U] = (uint64_t)0U;
+  x[4U] = (uint64_t)0U;
+  y[0U] = (uint64_t)1U;
+  y[1U] = (uint64_t)0U;
+  y[2U] = (uint64_t)0U;
+  y[3U] = (uint64_t)0U;
+  y[4U] = (uint64_t)0U;
+  z[0U] = (uint64_t)1U;
+  z[1U] = (uint64_t)0U;
+  z[2U] = (uint64_t)0U;
+  z[3U] = (uint64_t)0U;
+  z[4U] = (uint64_t)0U;
+  t[0U] = (uint64_t)0U;
+  t[1U] = (uint64_t)0U;
+  t[2U] = (uint64_t)0U;
+  t[3U] = (uint64_t)0U;
+  t[4U] = (uint64_t)0U;
+  memcpy(nqpq, q, (uint32_t)20U * sizeof (uint64_t));
+  for (uint32_t i = (uint32_t)0U; i < (uint32_t)256U; i++)
+  {
+    uint64_t *nq1 = b;
+    uint64_t *nqpq1 = b + (uint32_t)20U;
+    uint64_t *nq2 = b + (uint32_t)40U;
+    uint64_t *nqpq2 = b + (uint32_t)60U;
+    uint32_t q1 = ((uint32_t)255U - i) >> (uint32_t)3U;
+    uint32_t r = ((uint32_t)255U - i) & (uint32_t)7U;
+    uint8_t kq = scalar[q1];
+    uint8_t i1 = kq >> r & (uint8_t)1U;
+    swap_conditional_inplace(nq1, nqpq1, (uint64_t)i1);
+    point_double(nq2, nq1);
+    Hacl_Impl_Ed25519_PointAdd_point_add(nqpq2, nq1, nqpq1);
+    swap_conditional(nq1, nqpq1, nq2, nqpq2, (uint64_t)i1);
+  }
+  memcpy(result, nq, (uint32_t)20U * sizeof (uint64_t));
+}
+
+static inline void point_mul_g(uint64_t *result, uint8_t *scalar)
+{
+  uint64_t g[20U] = { 0U };
+  uint64_t *gx = g;
+  uint64_t *gy = g + (uint32_t)5U;
+  uint64_t *gz = g + (uint32_t)10U;
+  uint64_t *gt = g + (uint32_t)15U;
+  gx[0U] = (uint64_t)0x00062d608f25d51aU;
+  gx[1U] = (uint64_t)0x000412a4b4f6592aU;
+  gx[2U] = (uint64_t)0x00075b7171a4b31dU;
+  gx[3U] = (uint64_t)0x0001ff60527118feU;
+  gx[4U] = (uint64_t)0x000216936d3cd6e5U;
+  gy[0U] = (uint64_t)0x0006666666666658U;
+  gy[1U] = (uint64_t)0x0004ccccccccccccU;
+  gy[2U] = (uint64_t)0x0001999999999999U;
+  gy[3U] = (uint64_t)0x0003333333333333U;
+  gy[4U] = (uint64_t)0x0006666666666666U;
+  gz[0U] = (uint64_t)1U;
+  gz[1U] = (uint64_t)0U;
+  gz[2U] = (uint64_t)0U;
+  gz[3U] = (uint64_t)0U;
+  gz[4U] = (uint64_t)0U;
+  gt[0U] = (uint64_t)0x00068ab3a5b7dda3U;
+  gt[1U] = (uint64_t)0x00000eea2a5eadbbU;
+  gt[2U] = (uint64_t)0x0002af8df483c27eU;
+  gt[3U] = (uint64_t)0x000332b375274732U;
+  gt[4U] = (uint64_t)0x00067875f0fd78b7U;
+  Hacl_Impl_Ed25519_Ladder_point_mul(result, scalar, g);
+}
+
+void Hacl_Impl_Ed25519_PointCompress_point_compress(uint8_t *z, uint64_t *p)
+{
+  uint64_t tmp[15U] = { 0U };
+  uint64_t *x = tmp + (uint32_t)5U;
+  uint64_t *out = tmp + (uint32_t)10U;
+  uint64_t *zinv1 = tmp;
+  uint64_t *x1 = tmp + (uint32_t)5U;
+  uint64_t *out1 = tmp + (uint32_t)10U;
+  uint64_t *px = p;
+  uint64_t *py = p + (uint32_t)5U;
+  uint64_t *pz = p + (uint32_t)10U;
+  Hacl_Bignum25519_inverse(zinv1, pz);
+  fmul0(x1, px, zinv1);
+  reduce(x1);
+  fmul0(out1, py, zinv1);
+  Hacl_Bignum25519_reduce_513(out1);
+  uint64_t x0 = x[0U];
+  uint64_t b = x0 & (uint64_t)1U;
+  Hacl_Bignum25519_store_51(z, out);
+  uint8_t xbyte = (uint8_t)b;
+  uint8_t o31 = z[31U];
+  z[31U] = o31 + (xbyte << (uint32_t)7U);
+}
+
+static inline void secret_expand(uint8_t *expanded, uint8_t *secret)
+{
+  Hacl_Hash_SHA2_hash_512(secret, (uint32_t)32U, expanded);
+  uint8_t *h_low = expanded;
+  uint8_t h_low0 = h_low[0U];
+  uint8_t h_low31 = h_low[31U];
+  h_low[0U] = h_low0 & (uint8_t)0xf8U;
+  h_low[31U] = (h_low31 & (uint8_t)127U) | (uint8_t)64U;
+}
+
+static inline void secret_to_public(uint8_t *out, uint8_t *secret)
+{
+  uint8_t expanded_secret[64U] = { 0U };
+  uint64_t res[20U] = { 0U };
+  secret_expand(expanded_secret, secret);
+  uint8_t *a = expanded_secret;
+  point_mul_g(res, a);
+  Hacl_Impl_Ed25519_PointCompress_point_compress(out, res);
+}
+
+static inline void barrett_reduction(uint64_t *z, uint64_t *t)
+{
+  uint64_t t0 = t[0U];
+  uint64_t t1 = t[1U];
+  uint64_t t2 = t[2U];
+  uint64_t t3 = t[3U];
+  uint64_t t4 = t[4U];
+  uint64_t t5 = t[5U];
+  uint64_t t6 = t[6U];
+  uint64_t t7 = t[7U];
+  uint64_t t8 = t[8U];
+  uint64_t t9 = t[9U];
+  uint64_t m00 = (uint64_t)0x12631a5cf5d3edU;
+  uint64_t m10 = (uint64_t)0xf9dea2f79cd658U;
+  uint64_t m20 = (uint64_t)0x000000000014deU;
+  uint64_t m30 = (uint64_t)0x00000000000000U;
+  uint64_t m40 = (uint64_t)0x00000010000000U;
+  uint64_t m0 = m00;
+  uint64_t m1 = m10;
+  uint64_t m2 = m20;
+  uint64_t m3 = m30;
+  uint64_t m4 = m40;
+  uint64_t m010 = (uint64_t)0x9ce5a30a2c131bU;
+  uint64_t m110 = (uint64_t)0x215d086329a7edU;
+  uint64_t m210 = (uint64_t)0xffffffffeb2106U;
+  uint64_t m310 = (uint64_t)0xffffffffffffffU;
+  uint64_t m410 = (uint64_t)0x00000fffffffffU;
+  uint64_t mu0 = m010;
+  uint64_t mu1 = m110;
+  uint64_t mu2 = m210;
+  uint64_t mu3 = m310;
+  uint64_t mu4 = m410;
+  uint64_t y_ = (t5 & (uint64_t)0xffffffU) << (uint32_t)32U;
+  uint64_t x_ = t4 >> (uint32_t)24U;
+  uint64_t z00 = x_ | y_;
+  uint64_t y_0 = (t6 & (uint64_t)0xffffffU) << (uint32_t)32U;
+  uint64_t x_0 = t5 >> (uint32_t)24U;
+  uint64_t z10 = x_0 | y_0;
+  uint64_t y_1 = (t7 & (uint64_t)0xffffffU) << (uint32_t)32U;
+  uint64_t x_1 = t6 >> (uint32_t)24U;
+  uint64_t z20 = x_1 | y_1;
+  uint64_t y_2 = (t8 & (uint64_t)0xffffffU) << (uint32_t)32U;
+  uint64_t x_2 = t7 >> (uint32_t)24U;
+  uint64_t z30 = x_2 | y_2;
+  uint64_t y_3 = (t9 & (uint64_t)0xffffffU) << (uint32_t)32U;
+  uint64_t x_3 = t8 >> (uint32_t)24U;
+  uint64_t z40 = x_3 | y_3;
+  uint64_t q0 = z00;
+  uint64_t q1 = z10;
+  uint64_t q2 = z20;
+  uint64_t q3 = z30;
+  uint64_t q4 = z40;
+  FStar_UInt128_uint128 xy000 = FStar_UInt128_mul_wide(q0, mu0);
+  FStar_UInt128_uint128 xy010 = FStar_UInt128_mul_wide(q0, mu1);
+  FStar_UInt128_uint128 xy020 = FStar_UInt128_mul_wide(q0, mu2);
+  FStar_UInt128_uint128 xy030 = FStar_UInt128_mul_wide(q0, mu3);
+  FStar_UInt128_uint128 xy040 = FStar_UInt128_mul_wide(q0, mu4);
+  FStar_UInt128_uint128 xy100 = FStar_UInt128_mul_wide(q1, mu0);
+  FStar_UInt128_uint128 xy110 = FStar_UInt128_mul_wide(q1, mu1);
+  FStar_UInt128_uint128 xy120 = FStar_UInt128_mul_wide(q1, mu2);
+  FStar_UInt128_uint128 xy130 = FStar_UInt128_mul_wide(q1, mu3);
+  FStar_UInt128_uint128 xy14 = FStar_UInt128_mul_wide(q1, mu4);
+  FStar_UInt128_uint128 xy200 = FStar_UInt128_mul_wide(q2, mu0);
+  FStar_UInt128_uint128 xy210 = FStar_UInt128_mul_wide(q2, mu1);
+  FStar_UInt128_uint128 xy220 = FStar_UInt128_mul_wide(q2, mu2);
+  FStar_UInt128_uint128 xy23 = FStar_UInt128_mul_wide(q2, mu3);
+  FStar_UInt128_uint128 xy24 = FStar_UInt128_mul_wide(q2, mu4);
+  FStar_UInt128_uint128 xy300 = FStar_UInt128_mul_wide(q3, mu0);
+  FStar_UInt128_uint128 xy310 = FStar_UInt128_mul_wide(q3, mu1);
+  FStar_UInt128_uint128 xy32 = FStar_UInt128_mul_wide(q3, mu2);
+  FStar_UInt128_uint128 xy33 = FStar_UInt128_mul_wide(q3, mu3);
+  FStar_UInt128_uint128 xy34 = FStar_UInt128_mul_wide(q3, mu4);
+  FStar_UInt128_uint128 xy400 = FStar_UInt128_mul_wide(q4, mu0);
+  FStar_UInt128_uint128 xy41 = FStar_UInt128_mul_wide(q4, mu1);
+  FStar_UInt128_uint128 xy42 = FStar_UInt128_mul_wide(q4, mu2);
+  FStar_UInt128_uint128 xy43 = FStar_UInt128_mul_wide(q4, mu3);
+  FStar_UInt128_uint128 xy44 = FStar_UInt128_mul_wide(q4, mu4);
+  FStar_UInt128_uint128 z01 = xy000;
+  FStar_UInt128_uint128 z11 = FStar_UInt128_add_mod(xy010, xy100);
+  FStar_UInt128_uint128 z21 = FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy020, xy110), xy200);
+  FStar_UInt128_uint128
+  z31 =
+    FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy030, xy120), xy210),
+      xy300);
+  FStar_UInt128_uint128
+  z41 =
+    FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy040,
+            xy130),
+          xy220),
+        xy310),
+      xy400);
+  FStar_UInt128_uint128
+  z5 =
+    FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy14, xy23), xy32),
+      xy41);
+  FStar_UInt128_uint128 z6 = FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy24, xy33), xy42);
+  FStar_UInt128_uint128 z7 = FStar_UInt128_add_mod(xy34, xy43);
+  FStar_UInt128_uint128 z8 = xy44;
+  FStar_UInt128_uint128 carry0 = FStar_UInt128_shift_right(z01, (uint32_t)56U);
+  FStar_UInt128_uint128 c00 = carry0;
+  FStar_UInt128_uint128
+  carry1 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z11, c00), (uint32_t)56U);
+  /*uint64_t
+  t100 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z11, c00))
+    & (uint64_t)0xffffffffffffffU;*/
+  FStar_UInt128_uint128 c10 = carry1;
+  FStar_UInt128_uint128
+  carry2 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z21, c10), (uint32_t)56U);
+  /*uint64_t
+  t101 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z21, c10))
+    & (uint64_t)0xffffffffffffffU;*/
+  FStar_UInt128_uint128 c20 = carry2;
+  FStar_UInt128_uint128
+  carry3 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z31, c20), (uint32_t)56U);
+  /*
+  uint64_t
+  t102 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z31, c20))
+    & (uint64_t)0xffffffffffffffU;*/
+  FStar_UInt128_uint128 c30 = carry3;
+  FStar_UInt128_uint128
+  carry4 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z41, c30), (uint32_t)56U);
+  uint64_t
+  t103 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z41, c30))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c40 = carry4;
+  uint64_t t410 = t103;
+  FStar_UInt128_uint128
+  carry5 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z5, c40), (uint32_t)56U);
+  uint64_t
+  t104 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z5, c40))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c5 = carry5;
+  uint64_t t51 = t104;
+  FStar_UInt128_uint128
+  carry6 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z6, c5), (uint32_t)56U);
+  uint64_t
+  t105 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z6, c5))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c6 = carry6;
+  uint64_t t61 = t105;
+  FStar_UInt128_uint128
+  carry7 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z7, c6), (uint32_t)56U);
+  uint64_t
+  t106 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z7, c6))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c7 = carry7;
+  uint64_t t71 = t106;
+  FStar_UInt128_uint128
+  carry8 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z8, c7), (uint32_t)56U);
+  uint64_t
+  t107 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z8, c7))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c8 = carry8;
+  uint64_t t81 = t107;
+  uint64_t t91 = FStar_UInt128_uint128_to_uint64(c8);
+  uint64_t qmu4_ = t410;
+  uint64_t qmu5_ = t51;
+  uint64_t qmu6_ = t61;
+  uint64_t qmu7_ = t71;
+  uint64_t qmu8_ = t81;
+  uint64_t qmu9_ = t91;
+  uint64_t y_4 = (qmu5_ & (uint64_t)0xffffffffffU) << (uint32_t)16U;
+  uint64_t x_4 = qmu4_ >> (uint32_t)40U;
+  uint64_t z02 = x_4 | y_4;
+  uint64_t y_5 = (qmu6_ & (uint64_t)0xffffffffffU) << (uint32_t)16U;
+  uint64_t x_5 = qmu5_ >> (uint32_t)40U;
+  uint64_t z12 = x_5 | y_5;
+  uint64_t y_6 = (qmu7_ & (uint64_t)0xffffffffffU) << (uint32_t)16U;
+  uint64_t x_6 = qmu6_ >> (uint32_t)40U;
+  uint64_t z22 = x_6 | y_6;
+  uint64_t y_7 = (qmu8_ & (uint64_t)0xffffffffffU) << (uint32_t)16U;
+  uint64_t x_7 = qmu7_ >> (uint32_t)40U;
+  uint64_t z32 = x_7 | y_7;
+  uint64_t y_8 = (qmu9_ & (uint64_t)0xffffffffffU) << (uint32_t)16U;
+  uint64_t x_8 = qmu8_ >> (uint32_t)40U;
+  uint64_t z42 = x_8 | y_8;
+  uint64_t qdiv0 = z02;
+  uint64_t qdiv1 = z12;
+  uint64_t qdiv2 = z22;
+  uint64_t qdiv3 = z32;
+  uint64_t qdiv4 = z42;
+  uint64_t r0 = t0;
+  uint64_t r1 = t1;
+  uint64_t r2 = t2;
+  uint64_t r3 = t3;
+  uint64_t r4 = t4 & (uint64_t)0xffffffffffU;
+  FStar_UInt128_uint128 xy00 = FStar_UInt128_mul_wide(qdiv0, m0);
+  FStar_UInt128_uint128 xy01 = FStar_UInt128_mul_wide(qdiv0, m1);
+  FStar_UInt128_uint128 xy02 = FStar_UInt128_mul_wide(qdiv0, m2);
+  FStar_UInt128_uint128 xy03 = FStar_UInt128_mul_wide(qdiv0, m3);
+  FStar_UInt128_uint128 xy04 = FStar_UInt128_mul_wide(qdiv0, m4);
+  FStar_UInt128_uint128 xy10 = FStar_UInt128_mul_wide(qdiv1, m0);
+  FStar_UInt128_uint128 xy11 = FStar_UInt128_mul_wide(qdiv1, m1);
+  FStar_UInt128_uint128 xy12 = FStar_UInt128_mul_wide(qdiv1, m2);
+  FStar_UInt128_uint128 xy13 = FStar_UInt128_mul_wide(qdiv1, m3);
+  FStar_UInt128_uint128 xy20 = FStar_UInt128_mul_wide(qdiv2, m0);
+  FStar_UInt128_uint128 xy21 = FStar_UInt128_mul_wide(qdiv2, m1);
+  FStar_UInt128_uint128 xy22 = FStar_UInt128_mul_wide(qdiv2, m2);
+  FStar_UInt128_uint128 xy30 = FStar_UInt128_mul_wide(qdiv3, m0);
+  FStar_UInt128_uint128 xy31 = FStar_UInt128_mul_wide(qdiv3, m1);
+  FStar_UInt128_uint128 xy40 = FStar_UInt128_mul_wide(qdiv4, m0);
+  FStar_UInt128_uint128 carry9 = FStar_UInt128_shift_right(xy00, (uint32_t)56U);
+  uint64_t t108 = FStar_UInt128_uint128_to_uint64(xy00) & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c0 = carry9;
+  uint64_t t010 = t108;
+  FStar_UInt128_uint128
+  carry10 =
+    FStar_UInt128_shift_right(FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy01, xy10), c0),
+      (uint32_t)56U);
+  uint64_t
+  t109 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy01, xy10), c0))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c11 = carry10;
+  uint64_t t110 = t109;
+  FStar_UInt128_uint128
+  carry11 =
+    FStar_UInt128_shift_right(FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy02,
+            xy11),
+          xy20),
+        c11),
+      (uint32_t)56U);
+  uint64_t
+  t1010 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy02,
+            xy11),
+          xy20),
+        c11))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c21 = carry11;
+  uint64_t t210 = t1010;
+  FStar_UInt128_uint128
+  carry =
+    FStar_UInt128_shift_right(FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy03,
+              xy12),
+            xy21),
+          xy30),
+        c21),
+      (uint32_t)56U);
+  uint64_t
+  t1011 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy03,
+              xy12),
+            xy21),
+          xy30),
+        c21))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c31 = carry;
+  uint64_t t310 = t1011;
+  uint64_t
+  t411 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy04,
+                xy13),
+              xy22),
+            xy31),
+          xy40),
+        c31))
+    & (uint64_t)0xffffffffffU;
+  uint64_t qmul0 = t010;
+  uint64_t qmul1 = t110;
+  uint64_t qmul2 = t210;
+  uint64_t qmul3 = t310;
+  uint64_t qmul4 = t411;
+  uint64_t b5 = (r0 - qmul0) >> (uint32_t)63U;
+  uint64_t t1012 = (b5 << (uint32_t)56U) + r0 - qmul0;
+  uint64_t c1 = b5;
+  uint64_t t011 = t1012;
+  uint64_t b6 = (r1 - (qmul1 + c1)) >> (uint32_t)63U;
+  uint64_t t1013 = (b6 << (uint32_t)56U) + r1 - (qmul1 + c1);
+  uint64_t c2 = b6;
+  uint64_t t111 = t1013;
+  uint64_t b7 = (r2 - (qmul2 + c2)) >> (uint32_t)63U;
+  uint64_t t1014 = (b7 << (uint32_t)56U) + r2 - (qmul2 + c2);
+  uint64_t c3 = b7;
+  uint64_t t211 = t1014;
+  uint64_t b8 = (r3 - (qmul3 + c3)) >> (uint32_t)63U;
+  uint64_t t1015 = (b8 << (uint32_t)56U) + r3 - (qmul3 + c3);
+  uint64_t c4 = b8;
+  uint64_t t311 = t1015;
+  uint64_t b9 = (r4 - (qmul4 + c4)) >> (uint32_t)63U;
+  uint64_t t1016 = (b9 << (uint32_t)40U) + r4 - (qmul4 + c4);
+  uint64_t t412 = t1016;
+  uint64_t s0 = t011;
+  uint64_t s1 = t111;
+  uint64_t s2 = t211;
+  uint64_t s3 = t311;
+  uint64_t s4 = t412;
+  uint64_t m01 = (uint64_t)0x12631a5cf5d3edU;
+  uint64_t m11 = (uint64_t)0xf9dea2f79cd658U;
+  uint64_t m21 = (uint64_t)0x000000000014deU;
+  uint64_t m31 = (uint64_t)0x00000000000000U;
+  uint64_t m41 = (uint64_t)0x00000010000000U;
+  uint64_t y0 = m01;
+  uint64_t y1 = m11;
+  uint64_t y2 = m21;
+  uint64_t y3 = m31;
+  uint64_t y4 = m41;
+  uint64_t b10 = (s0 - y0) >> (uint32_t)63U;
+  uint64_t t1017 = (b10 << (uint32_t)56U) + s0 - y0;
+  uint64_t b0 = b10;
+  uint64_t t01 = t1017;
+  uint64_t b11 = (s1 - (y1 + b0)) >> (uint32_t)63U;
+  uint64_t t1018 = (b11 << (uint32_t)56U) + s1 - (y1 + b0);
+  uint64_t b1 = b11;
+  uint64_t t11 = t1018;
+  uint64_t b12 = (s2 - (y2 + b1)) >> (uint32_t)63U;
+  uint64_t t1019 = (b12 << (uint32_t)56U) + s2 - (y2 + b1);
+  uint64_t b2 = b12;
+  uint64_t t21 = t1019;
+  uint64_t b13 = (s3 - (y3 + b2)) >> (uint32_t)63U;
+  uint64_t t1020 = (b13 << (uint32_t)56U) + s3 - (y3 + b2);
+  uint64_t b3 = b13;
+  uint64_t t31 = t1020;
+  uint64_t b = (s4 - (y4 + b3)) >> (uint32_t)63U;
+  uint64_t t10 = (b << (uint32_t)56U) + s4 - (y4 + b3);
+  uint64_t b4 = b;
+  uint64_t t41 = t10;
+  uint64_t mask = b4 - (uint64_t)1U;
+  uint64_t z03 = s0 ^ (mask & (s0 ^ t01));
+  uint64_t z13 = s1 ^ (mask & (s1 ^ t11));
+  uint64_t z23 = s2 ^ (mask & (s2 ^ t21));
+  uint64_t z33 = s3 ^ (mask & (s3 ^ t31));
+  uint64_t z43 = s4 ^ (mask & (s4 ^ t41));
+  uint64_t z04 = z03;
+  uint64_t z14 = z13;
+  uint64_t z24 = z23;
+  uint64_t z34 = z33;
+  uint64_t z44 = z43;
+  uint64_t o0 = z04;
+  uint64_t o1 = z14;
+  uint64_t o2 = z24;
+  uint64_t o3 = z34;
+  uint64_t o4 = z44;
+  uint64_t z0 = o0;
+  uint64_t z1 = o1;
+  uint64_t z2 = o2;
+  uint64_t z3 = o3;
+  uint64_t z4 = o4;
+  z[0U] = z0;
+  z[1U] = z1;
+  z[2U] = z2;
+  z[3U] = z3;
+  z[4U] = z4;
+}
+
+static inline void mul_modq(uint64_t *out, uint64_t *x, uint64_t *y)
+{
+  uint64_t tmp[10U] = { 0U };
+  uint64_t x0 = x[0U];
+  uint64_t x1 = x[1U];
+  uint64_t x2 = x[2U];
+  uint64_t x3 = x[3U];
+  uint64_t x4 = x[4U];
+  uint64_t y0 = y[0U];
+  uint64_t y1 = y[1U];
+  uint64_t y2 = y[2U];
+  uint64_t y3 = y[3U];
+  uint64_t y4 = y[4U];
+  FStar_UInt128_uint128 xy00 = FStar_UInt128_mul_wide(x0, y0);
+  FStar_UInt128_uint128 xy01 = FStar_UInt128_mul_wide(x0, y1);
+  FStar_UInt128_uint128 xy02 = FStar_UInt128_mul_wide(x0, y2);
+  FStar_UInt128_uint128 xy03 = FStar_UInt128_mul_wide(x0, y3);
+  FStar_UInt128_uint128 xy04 = FStar_UInt128_mul_wide(x0, y4);
+  FStar_UInt128_uint128 xy10 = FStar_UInt128_mul_wide(x1, y0);
+  FStar_UInt128_uint128 xy11 = FStar_UInt128_mul_wide(x1, y1);
+  FStar_UInt128_uint128 xy12 = FStar_UInt128_mul_wide(x1, y2);
+  FStar_UInt128_uint128 xy13 = FStar_UInt128_mul_wide(x1, y3);
+  FStar_UInt128_uint128 xy14 = FStar_UInt128_mul_wide(x1, y4);
+  FStar_UInt128_uint128 xy20 = FStar_UInt128_mul_wide(x2, y0);
+  FStar_UInt128_uint128 xy21 = FStar_UInt128_mul_wide(x2, y1);
+  FStar_UInt128_uint128 xy22 = FStar_UInt128_mul_wide(x2, y2);
+  FStar_UInt128_uint128 xy23 = FStar_UInt128_mul_wide(x2, y3);
+  FStar_UInt128_uint128 xy24 = FStar_UInt128_mul_wide(x2, y4);
+  FStar_UInt128_uint128 xy30 = FStar_UInt128_mul_wide(x3, y0);
+  FStar_UInt128_uint128 xy31 = FStar_UInt128_mul_wide(x3, y1);
+  FStar_UInt128_uint128 xy32 = FStar_UInt128_mul_wide(x3, y2);
+  FStar_UInt128_uint128 xy33 = FStar_UInt128_mul_wide(x3, y3);
+  FStar_UInt128_uint128 xy34 = FStar_UInt128_mul_wide(x3, y4);
+  FStar_UInt128_uint128 xy40 = FStar_UInt128_mul_wide(x4, y0);
+  FStar_UInt128_uint128 xy41 = FStar_UInt128_mul_wide(x4, y1);
+  FStar_UInt128_uint128 xy42 = FStar_UInt128_mul_wide(x4, y2);
+  FStar_UInt128_uint128 xy43 = FStar_UInt128_mul_wide(x4, y3);
+  FStar_UInt128_uint128 xy44 = FStar_UInt128_mul_wide(x4, y4);
+  FStar_UInt128_uint128 z00 = xy00;
+  FStar_UInt128_uint128 z10 = FStar_UInt128_add_mod(xy01, xy10);
+  FStar_UInt128_uint128 z20 = FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy02, xy11), xy20);
+  FStar_UInt128_uint128
+  z30 =
+    FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy03, xy12), xy21),
+      xy30);
+  FStar_UInt128_uint128
+  z40 =
+    FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy04,
+            xy13),
+          xy22),
+        xy31),
+      xy40);
+  FStar_UInt128_uint128
+  z50 =
+    FStar_UInt128_add_mod(FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy14, xy23), xy32),
+      xy41);
+  FStar_UInt128_uint128 z60 = FStar_UInt128_add_mod(FStar_UInt128_add_mod(xy24, xy33), xy42);
+  FStar_UInt128_uint128 z70 = FStar_UInt128_add_mod(xy34, xy43);
+  FStar_UInt128_uint128 z80 = xy44;
+  FStar_UInt128_uint128 carry0 = FStar_UInt128_shift_right(z00, (uint32_t)56U);
+  uint64_t t10 = FStar_UInt128_uint128_to_uint64(z00) & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c0 = carry0;
+  uint64_t t0 = t10;
+  FStar_UInt128_uint128
+  carry1 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z10, c0), (uint32_t)56U);
+  uint64_t
+  t11 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z10, c0))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c1 = carry1;
+  uint64_t t1 = t11;
+  FStar_UInt128_uint128
+  carry2 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z20, c1), (uint32_t)56U);
+  uint64_t
+  t12 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z20, c1))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c2 = carry2;
+  uint64_t t2 = t12;
+  FStar_UInt128_uint128
+  carry3 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z30, c2), (uint32_t)56U);
+  uint64_t
+  t13 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z30, c2))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c3 = carry3;
+  uint64_t t3 = t13;
+  FStar_UInt128_uint128
+  carry4 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z40, c3), (uint32_t)56U);
+  uint64_t
+  t14 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z40, c3))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c4 = carry4;
+  uint64_t t4 = t14;
+  FStar_UInt128_uint128
+  carry5 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z50, c4), (uint32_t)56U);
+  uint64_t
+  t15 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z50, c4))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c5 = carry5;
+  uint64_t t5 = t15;
+  FStar_UInt128_uint128
+  carry6 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z60, c5), (uint32_t)56U);
+  uint64_t
+  t16 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z60, c5))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c6 = carry6;
+  uint64_t t6 = t16;
+  FStar_UInt128_uint128
+  carry7 = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z70, c6), (uint32_t)56U);
+  uint64_t
+  t17 =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z70, c6))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c7 = carry7;
+  uint64_t t7 = t17;
+  FStar_UInt128_uint128
+  carry = FStar_UInt128_shift_right(FStar_UInt128_add_mod(z80, c7), (uint32_t)56U);
+  uint64_t
+  t =
+    FStar_UInt128_uint128_to_uint64(FStar_UInt128_add_mod(z80, c7))
+    & (uint64_t)0xffffffffffffffU;
+  FStar_UInt128_uint128 c8 = carry;
+  uint64_t t8 = t;
+  uint64_t t9 = FStar_UInt128_uint128_to_uint64(c8);
+  uint64_t z0 = t0;
+  uint64_t z1 = t1;
+  uint64_t z2 = t2;
+  uint64_t z3 = t3;
+  uint64_t z4 = t4;
+  uint64_t z5 = t5;
+  uint64_t z6 = t6;
+  uint64_t z7 = t7;
+  uint64_t z8 = t8;
+  uint64_t z9 = t9;
+  tmp[0U] = z0;
+  tmp[1U] = z1;
+  tmp[2U] = z2;
+  tmp[3U] = z3;
+  tmp[4U] = z4;
+  tmp[5U] = z5;
+  tmp[6U] = z6;
+  tmp[7U] = z7;
+  tmp[8U] = z8;
+  tmp[9U] = z9;
+  barrett_reduction(out, tmp);
+}
+
+static inline void add_modq(uint64_t *out, uint64_t *x, uint64_t *y)
+{
+  uint64_t x0 = x[0U];
+  uint64_t x1 = x[1U];
+  uint64_t x2 = x[2U];
+  uint64_t x3 = x[3U];
+  uint64_t x4 = x[4U];
+  uint64_t y0 = y[0U];
+  uint64_t y1 = y[1U];
+  uint64_t y2 = y[2U];
+  uint64_t y3 = y[3U];
+  uint64_t y4 = y[4U];
+  uint64_t carry0 = (x0 + y0) >> (uint32_t)56U;
+  uint64_t t0 = (x0 + y0) & (uint64_t)0xffffffffffffffU;
+  uint64_t t00 = t0;
+  uint64_t c0 = carry0;
+  uint64_t carry1 = (x1 + y1 + c0) >> (uint32_t)56U;
+  uint64_t t1 = (x1 + y1 + c0) & (uint64_t)0xffffffffffffffU;
+  uint64_t t10 = t1;
+  uint64_t c1 = carry1;
+  uint64_t carry2 = (x2 + y2 + c1) >> (uint32_t)56U;
+  uint64_t t2 = (x2 + y2 + c1) & (uint64_t)0xffffffffffffffU;
+  uint64_t t20 = t2;
+  uint64_t c2 = carry2;
+  uint64_t carry = (x3 + y3 + c2) >> (uint32_t)56U;
+  uint64_t t3 = (x3 + y3 + c2) & (uint64_t)0xffffffffffffffU;
+  uint64_t t30 = t3;
+  uint64_t c3 = carry;
+  uint64_t t4 = x4 + y4 + c3;
+  uint64_t m0 = (uint64_t)0x12631a5cf5d3edU;
+  uint64_t m1 = (uint64_t)0xf9dea2f79cd658U;
+  uint64_t m2 = (uint64_t)0x000000000014deU;
+  uint64_t m3 = (uint64_t)0x00000000000000U;
+  uint64_t m4 = (uint64_t)0x00000010000000U;
+  uint64_t y01 = m0;
+  uint64_t y11 = m1;
+  uint64_t y21 = m2;
+  uint64_t y31 = m3;
+  uint64_t y41 = m4;
+  uint64_t b5 = (t00 - y01) >> (uint32_t)63U;
+  uint64_t t5 = (b5 << (uint32_t)56U) + t00 - y01;
+  uint64_t b0 = b5;
+  uint64_t t01 = t5;
+  uint64_t b6 = (t10 - (y11 + b0)) >> (uint32_t)63U;
+  uint64_t t6 = (b6 << (uint32_t)56U) + t10 - (y11 + b0);
+  uint64_t b1 = b6;
+  uint64_t t11 = t6;
+  uint64_t b7 = (t20 - (y21 + b1)) >> (uint32_t)63U;
+  uint64_t t7 = (b7 << (uint32_t)56U) + t20 - (y21 + b1);
+  uint64_t b2 = b7;
+  uint64_t t21 = t7;
+  uint64_t b8 = (t30 - (y31 + b2)) >> (uint32_t)63U;
+  uint64_t t8 = (b8 << (uint32_t)56U) + t30 - (y31 + b2);
+  uint64_t b3 = b8;
+  uint64_t t31 = t8;
+  uint64_t b = (t4 - (y41 + b3)) >> (uint32_t)63U;
+  uint64_t t = (b << (uint32_t)56U) + t4 - (y41 + b3);
+  uint64_t b4 = b;
+  uint64_t t41 = t;
+  uint64_t mask = b4 - (uint64_t)1U;
+  uint64_t z00 = t00 ^ (mask & (t00 ^ t01));
+  uint64_t z10 = t10 ^ (mask & (t10 ^ t11));
+  uint64_t z20 = t20 ^ (mask & (t20 ^ t21));
+  uint64_t z30 = t30 ^ (mask & (t30 ^ t31));
+  uint64_t z40 = t4 ^ (mask & (t4 ^ t41));
+  uint64_t z01 = z00;
+  uint64_t z11 = z10;
+  uint64_t z21 = z20;
+  uint64_t z31 = z30;
+  uint64_t z41 = z40;
+  uint64_t o0 = z01;
+  uint64_t o1 = z11;
+  uint64_t o2 = z21;
+  uint64_t o3 = z31;
+  uint64_t o4 = z41;
+  uint64_t z0 = o0;
+  uint64_t z1 = o1;
+  uint64_t z2 = o2;
+  uint64_t z3 = o3;
+  uint64_t z4 = o4;
+  out[0U] = z0;
+  out[1U] = z1;
+  out[2U] = z2;
+  out[3U] = z3;
+  out[4U] = z4;
+}
+
+static inline void load_64_bytes(uint64_t *out, uint8_t *b)
+{
+  uint8_t *b80 = b;
+  uint64_t u = load64_le(b80);
+  uint64_t z = u;
+  uint64_t b0 = z & (uint64_t)0xffffffffffffffU;
+  uint8_t *b81 = b + (uint32_t)7U;
+  uint64_t u0 = load64_le(b81);
+  uint64_t z0 = u0;
+  uint64_t b1 = z0 & (uint64_t)0xffffffffffffffU;
+  uint8_t *b82 = b + (uint32_t)14U;
+  uint64_t u1 = load64_le(b82);
+  uint64_t z1 = u1;
+  uint64_t b2 = z1 & (uint64_t)0xffffffffffffffU;
+  uint8_t *b83 = b + (uint32_t)21U;
+  uint64_t u2 = load64_le(b83);
+  uint64_t z2 = u2;
+  uint64_t b3 = z2 & (uint64_t)0xffffffffffffffU;
+  uint8_t *b84 = b + (uint32_t)28U;
+  uint64_t u3 = load64_le(b84);
+  uint64_t z3 = u3;
+  uint64_t b4 = z3 & (uint64_t)0xffffffffffffffU;
+  uint8_t *b85 = b + (uint32_t)35U;
+  uint64_t u4 = load64_le(b85);
+  uint64_t z4 = u4;
+  uint64_t b5 = z4 & (uint64_t)0xffffffffffffffU;
+  uint8_t *b86 = b + (uint32_t)42U;
+  uint64_t u5 = load64_le(b86);
+  uint64_t z5 = u5;
+  uint64_t b6 = z5 & (uint64_t)0xffffffffffffffU;
+  uint8_t *b87 = b + (uint32_t)49U;
+  uint64_t u6 = load64_le(b87);
+  uint64_t z6 = u6;
+  uint64_t b7 = z6 & (uint64_t)0xffffffffffffffU;
+  uint8_t *b8 = b + (uint32_t)56U;
+  uint64_t u7 = load64_le(b8);
+  uint64_t z7 = u7;
+  uint64_t b88 = z7 & (uint64_t)0xffffffffffffffU;
+  uint8_t b63 = b[63U];
+  uint64_t b9 = (uint64_t)b63;
+  out[0U] = b0;
+  out[1U] = b1;
+  out[2U] = b2;
+  out[3U] = b3;
+  out[4U] = b4;
+  out[5U] = b5;
+  out[6U] = b6;
+  out[7U] = b7;
+  out[8U] = b88;
+  out[9U] = b9;
+}
+
+static inline void load_32_bytes(uint64_t *out, uint8_t *b)
+{
+  uint8_t *b80 = b;
+  uint64_t u0 = load64_le(b80);
+  uint64_t z = u0;
+  uint64_t b0 = z & (uint64_t)0xffffffffffffffU;
+  uint8_t *b81 = b + (uint32_t)7U;
+  uint64_t u1 = load64_le(b81);
+  uint64_t z0 = u1;
+  uint64_t b1 = z0 & (uint64_t)0xffffffffffffffU;
+  uint8_t *b82 = b + (uint32_t)14U;
+  uint64_t u2 = load64_le(b82);
+  uint64_t z1 = u2;
+  uint64_t b2 = z1 & (uint64_t)0xffffffffffffffU;
+  uint8_t *b8 = b + (uint32_t)21U;
+  uint64_t u3 = load64_le(b8);
+  uint64_t z2 = u3;
+  uint64_t b3 = z2 & (uint64_t)0xffffffffffffffU;
+  uint32_t u = load32_le(b + (uint32_t)28U);
+  uint32_t b4 = u;
+  uint64_t b41 = (uint64_t)b4;
+  out[0U] = b0;
+  out[1U] = b1;
+  out[2U] = b2;
+  out[3U] = b3;
+  out[4U] = b41;
+}
+
+static inline void store_56(uint8_t *out, uint64_t *b)
+{
+  uint64_t b0 = b[0U];
+  uint64_t b1 = b[1U];
+  uint64_t b2 = b[2U];
+  uint64_t b3 = b[3U];
+  uint64_t b4 = b[4U];
+  uint32_t b4_ = (uint32_t)b4;
+  uint8_t *b8 = out;
+  store64_le(b8, b0);
+  uint8_t *b80 = out + (uint32_t)7U;
+  store64_le(b80, b1);
+  uint8_t *b81 = out + (uint32_t)14U;
+  store64_le(b81, b2);
+  uint8_t *b82 = out + (uint32_t)21U;
+  store64_le(b82, b3);
+  store32_le(out + (uint32_t)28U, b4_);
+}
+
+static inline void sha512_pre_msg(uint8_t *h, uint8_t *prefix, uint32_t len, uint8_t *input)
+{
+  KRML_CHECK_SIZE(sizeof (uint8_t), len + (uint32_t)32U);
+  uint8_t pre_msg[len + (uint32_t)32U];
+  memset(pre_msg, 0U, (len + (uint32_t)32U) * sizeof (uint8_t));
+  memcpy(pre_msg, prefix, (uint32_t)32U * sizeof (uint8_t));
+  memcpy(pre_msg + (uint32_t)32U, input, len * sizeof (uint8_t));
+  Hacl_Hash_SHA2_hash_512(pre_msg, len + (uint32_t)32U, h);
+}
+
+static inline void
+sha512_pre_pre2_msg(
+  uint8_t *h,
+  uint8_t *prefix,
+  uint8_t *prefix2,
+  uint32_t len,
+  uint8_t *input
+)
+{
+  KRML_CHECK_SIZE(sizeof (uint8_t), len + (uint32_t)64U);
+  uint8_t pre_msg[len + (uint32_t)64U];
+  memset(pre_msg, 0U, (len + (uint32_t)64U) * sizeof (uint8_t));
+  memcpy(pre_msg, prefix, (uint32_t)32U * sizeof (uint8_t));
+  memcpy(pre_msg + (uint32_t)32U, prefix2, (uint32_t)32U * sizeof (uint8_t));
+  memcpy(pre_msg + (uint32_t)64U, input, len * sizeof (uint8_t));
+  Hacl_Hash_SHA2_hash_512(pre_msg, len + (uint32_t)64U, h);
+}
+
+static inline void
+sha512_modq_pre(uint64_t *out, uint8_t *prefix, uint32_t len, uint8_t *input)
+{
+  uint64_t tmp[10U] = { 0U };
+  uint8_t hash[64U] = { 0U };
+  sha512_pre_msg(hash, prefix, len, input);
+  load_64_bytes(tmp, hash);
+  barrett_reduction(out, tmp);
+}
+
+static inline void
+sha512_modq_pre_pre2(
+  uint64_t *out,
+  uint8_t *prefix,
+  uint8_t *prefix2,
+  uint32_t len,
+  uint8_t *input
+)
+{
+  uint64_t tmp[10U] = { 0U };
+  uint8_t hash[64U] = { 0U };
+  sha512_pre_pre2_msg(hash, prefix, prefix2, len, input);
+  load_64_bytes(tmp, hash);
+  barrett_reduction(out, tmp);
+}
+
+static inline void point_mul_g_compress(uint8_t *out, uint8_t *s)
+{
+  uint64_t tmp[20U] = { 0U };
+  point_mul_g(tmp, s);
+  Hacl_Impl_Ed25519_PointCompress_point_compress(out, tmp);
+}
+
+static inline void sign_expanded(uint8_t *signature, uint8_t *ks, uint32_t msg, uint8_t *len)
+{
+  uint8_t tmp_bytes[352U] = { 0U };
+  uint64_t tmp_ints[65U] = { 0U };
+  uint8_t *rs_ = tmp_bytes + (uint32_t)160U;
+  uint8_t *s_ = tmp_bytes + (uint32_t)192U;
+  uint8_t *tmp_public = tmp_bytes + (uint32_t)96U;
+  uint8_t *tmp_xsecret = tmp_bytes + (uint32_t)224U;
+  memcpy(tmp_public, ks, (uint32_t)32U * sizeof (uint8_t));
+  memcpy(tmp_xsecret, ks + (uint32_t)32U, (uint32_t)64U * sizeof (uint8_t));
+  uint64_t *r10 = tmp_ints + (uint32_t)20U;
+  uint8_t *apre = tmp_bytes + (uint32_t)224U;
+  uint8_t *prefix = apre + (uint32_t)32U;
+  sha512_modq_pre(r10, prefix, msg, len);
+  uint8_t rb[32U] = { 0U };
+  uint64_t *r1 = tmp_ints + (uint32_t)20U;
+  uint8_t *rs_1 = tmp_bytes + (uint32_t)160U;
+  store_56(rb, r1);
+  point_mul_g_compress(rs_1, rb);
+  uint64_t *h20 = tmp_ints + (uint32_t)60U;
+  uint8_t *a__ = tmp_bytes + (uint32_t)96U;
+  uint8_t *rs_10 = tmp_bytes + (uint32_t)160U;
+  sha512_modq_pre_pre2(h20, rs_10, a__, msg, len);
+  uint64_t *r11 = tmp_ints + (uint32_t)20U;
+  uint64_t *aq = tmp_ints + (uint32_t)45U;
+  uint64_t *ha = tmp_ints + (uint32_t)50U;
+  uint64_t *s = tmp_ints + (uint32_t)55U;
+  uint64_t *h2 = tmp_ints + (uint32_t)60U;
+  uint8_t *s_1 = tmp_bytes + (uint32_t)192U;
+  uint8_t *a = tmp_bytes + (uint32_t)224U;
+  load_32_bytes(aq, a);
+  mul_modq(ha, h2, aq);
+  add_modq(s, r11, ha);
+  store_56(s_1, s);
+  memcpy(signature, rs_, (uint32_t)32U * sizeof (uint8_t));
+  memcpy(signature + (uint32_t)32U, s_, (uint32_t)32U * sizeof (uint8_t));
+}
+
+static inline void pow2_252m2(uint64_t *out, uint64_t *z)
+{
+  uint64_t buf[20U] = { 0U };
+  uint64_t *a = buf;
+  uint64_t *t00 = buf + (uint32_t)5U;
+  uint64_t *b0 = buf + (uint32_t)10U;
+  uint64_t *c0 = buf + (uint32_t)15U;
+  fsquare_times(a, z, (uint32_t)1U);
+  fsquare_times(t00, a, (uint32_t)2U);
+  fmul0(b0, t00, z);
+  fmul0(a, b0, a);
+  fsquare_times(t00, a, (uint32_t)1U);
+  fmul0(b0, t00, b0);
+  fsquare_times(t00, b0, (uint32_t)5U);
+  fmul0(b0, t00, b0);
+  fsquare_times(t00, b0, (uint32_t)10U);
+  fmul0(c0, t00, b0);
+  fsquare_times(t00, c0, (uint32_t)20U);
+  fmul0(t00, t00, c0);
+  fsquare_times_inplace(t00, (uint32_t)10U);
+  fmul0(b0, t00, b0);
+  fsquare_times(t00, b0, (uint32_t)50U);
+  uint64_t *a0 = buf;
+  uint64_t *t0 = buf + (uint32_t)5U;
+  uint64_t *b = buf + (uint32_t)10U;
+  uint64_t *c = buf + (uint32_t)15U;
+  fsquare_times(a0, z, (uint32_t)1U);
+  fmul0(c, t0, b);
+  fsquare_times(t0, c, (uint32_t)100U);
+  fmul0(t0, t0, c);
+  fsquare_times_inplace(t0, (uint32_t)50U);
+  fmul0(t0, t0, b);
+  fsquare_times_inplace(t0, (uint32_t)2U);
+  fmul0(out, t0, a0);
+}
+
+static inline bool is_0(uint64_t *x)
+{
+  uint64_t x0 = x[0U];
+  uint64_t x1 = x[1U];
+  uint64_t x2 = x[2U];
+  uint64_t x3 = x[3U];
+  uint64_t x4 = x[4U];
+  return
+    x0
+    == (uint64_t)0U
+    && x1 == (uint64_t)0U
+    && x2 == (uint64_t)0U
+    && x3 == (uint64_t)0U
+    && x4 == (uint64_t)0U;
+}
+
+static inline void mul_modp_sqrt_m1(uint64_t *x)
+{
+  uint64_t sqrt_m1[5U] = { 0U };
+  sqrt_m1[0U] = (uint64_t)0x00061b274a0ea0b0U;
+  sqrt_m1[1U] = (uint64_t)0x0000d5a5fc8f189dU;
+  sqrt_m1[2U] = (uint64_t)0x0007ef5e9cbd0c60U;
+  sqrt_m1[3U] = (uint64_t)0x00078595a6804c9eU;
+  sqrt_m1[4U] = (uint64_t)0x0002b8324804fc1dU;
+  fmul0(x, x, sqrt_m1);
+}
+
+static inline bool recover_x(uint64_t *x, uint64_t *y, uint64_t sign)
+{
+  uint64_t tmp[20U] = { 0U };
+  uint64_t *x2 = tmp;
+  uint64_t x00 = y[0U];
+  uint64_t x1 = y[1U];
+  uint64_t x21 = y[2U];
+  uint64_t x30 = y[3U];
+  uint64_t x4 = y[4U];
+  bool
+  b =
+    x00
+    >= (uint64_t)0x7ffffffffffedU
+    && x1 == (uint64_t)0x7ffffffffffffU
+    && x21 == (uint64_t)0x7ffffffffffffU
+    && x30 == (uint64_t)0x7ffffffffffffU
+    && x4 == (uint64_t)0x7ffffffffffffU;
+  bool res;
+  if (b)
+  {
+    res = false;
+  }
+  else
+  {
+    uint64_t tmp1[25U] = { 0U };
+    uint64_t *one = tmp1;
+    uint64_t *y2 = tmp1 + (uint32_t)5U;
+    uint64_t *dyyi = tmp1 + (uint32_t)10U;
+    uint64_t *dyy = tmp1 + (uint32_t)15U;
+    one[0U] = (uint64_t)1U;
+    one[1U] = (uint64_t)0U;
+    one[2U] = (uint64_t)0U;
+    one[3U] = (uint64_t)0U;
+    one[4U] = (uint64_t)0U;
+    fsquare(y2, y);
+    times_d(dyy, y2);
+    fsum(dyy, one);
+    Hacl_Bignum25519_reduce_513(dyy);
+    Hacl_Bignum25519_inverse(dyyi, dyy);
+    fdifference(one, y2);
+    fmul0(x2, one, dyyi);
+    reduce(x2);
+    bool x2_is_0 = is_0(x2);
+    uint8_t z;
+    if (x2_is_0)
+    {
+      if (sign == (uint64_t)0U)
+      {
+        x[0U] = (uint64_t)0U;
+        x[1U] = (uint64_t)0U;
+        x[2U] = (uint64_t)0U;
+        x[3U] = (uint64_t)0U;
+        x[4U] = (uint64_t)0U;
+        z = (uint8_t)1U;
+      }
+      else
+      {
+        z = (uint8_t)0U;
+      }
+    }
+    else
+    {
+      z = (uint8_t)2U;
+    }
+    if (z == (uint8_t)0U)
+    {
+      res = false;
+    }
+    else if (z == (uint8_t)1U)
+    {
+      res = true;
+    }
+    else
+    {
+      uint64_t *x210 = tmp;
+      uint64_t *x31 = tmp + (uint32_t)5U;
+      uint64_t *t00 = tmp + (uint32_t)10U;
+      uint64_t *t10 = tmp + (uint32_t)15U;
+      pow2_252m2(x31, x210);
+      fsquare(t00, x31);
+      memcpy(t10, x210, (uint32_t)5U * sizeof (uint64_t));
+      fdifference(t10, t00);
+      Hacl_Bignum25519_reduce_513(t10);
+      reduce(t10);
+      bool t1_is_0 = is_0(t10);
+      if (!t1_is_0)
+      {
+        mul_modp_sqrt_m1(x31);
+      }
+      uint64_t *x211 = tmp;
+      uint64_t *x3 = tmp + (uint32_t)5U;
+      uint64_t *t01 = tmp + (uint32_t)10U;
+      uint64_t *t1 = tmp + (uint32_t)15U;
+      fsquare(t01, x3);
+      memcpy(t1, x211, (uint32_t)5U * sizeof (uint64_t));
+      fdifference(t1, t01);
+      Hacl_Bignum25519_reduce_513(t1);
+      reduce(t1);
+      bool z1 = is_0(t1);
+      if (z1 == false)
+      {
+        res = false;
+      }
+      else
+      {
+        uint64_t *x32 = tmp + (uint32_t)5U;
+        uint64_t *t0 = tmp + (uint32_t)10U;
+        reduce(x32);
+        uint64_t x0 = x32[0U];
+        uint64_t x01 = x0 & (uint64_t)1U;
+        if (!(x01 == sign))
+        {
+          t0[0U] = (uint64_t)0U;
+          t0[1U] = (uint64_t)0U;
+          t0[2U] = (uint64_t)0U;
+          t0[3U] = (uint64_t)0U;
+          t0[4U] = (uint64_t)0U;
+          fdifference(x32, t0);
+          Hacl_Bignum25519_reduce_513(x32);
+          reduce(x32);
+        }
+        memcpy(x, x32, (uint32_t)5U * sizeof (uint64_t));
+        res = true;
+      }
+    }
+  }
+  bool res0 = res;
+  return res0;
+}
+
+bool Hacl_Impl_Ed25519_PointDecompress_point_decompress(uint64_t *out, uint8_t *s)
+{
+  uint64_t tmp[10U] = { 0U };
+  uint64_t *y = tmp;
+  uint64_t *x = tmp + (uint32_t)5U;
+  uint8_t s31 = s[31U];
+  uint8_t z = s31 >> (uint32_t)7U;
+  uint64_t sign = (uint64_t)z;
+  Hacl_Bignum25519_load_51(y, s);
+  bool z0 = recover_x(x, y, sign);
+  bool res;
+  if (z0 == false)
+  {
+    res = false;
+  }
+  else
+  {
+    uint64_t *outx = out;
+    uint64_t *outy = out + (uint32_t)5U;
+    uint64_t *outz = out + (uint32_t)10U;
+    uint64_t *outt = out + (uint32_t)15U;
+    memcpy(outx, x, (uint32_t)5U * sizeof (uint64_t));
+    memcpy(outy, y, (uint32_t)5U * sizeof (uint64_t));
+    outz[0U] = (uint64_t)1U;
+    outz[1U] = (uint64_t)0U;
+    outz[2U] = (uint64_t)0U;
+    outz[3U] = (uint64_t)0U;
+    outz[4U] = (uint64_t)0U;
+    fmul0(outt, x, y);
+    res = true;
+  }
+  bool res0 = res;
+  return res0;
+}
+
+static inline bool gte_q(uint64_t *s)
+{
+  uint64_t s0 = s[0U];
+  uint64_t s1 = s[1U];
+  uint64_t s2 = s[2U];
+  uint64_t s3 = s[3U];
+  uint64_t s4 = s[4U];
+  if (s4 > (uint64_t)0x00000010000000U)
+  {
+    return true;
+  }
+  if (s4 < (uint64_t)0x00000010000000U)
+  {
+    return false;
+  }
+  if (s3 > (uint64_t)0x00000000000000U)
+  {
+    return true;
+  }
+  if (s2 > (uint64_t)0x000000000014deU)
+  {
+    return true;
+  }
+  if (s2 < (uint64_t)0x000000000014deU)
+  {
+    return false;
+  }
+  if (s1 > (uint64_t)0xf9dea2f79cd658U)
+  {
+    return true;
+  }
+  if (s1 < (uint64_t)0xf9dea2f79cd658U)
+  {
+    return false;
+  }
+  if (s0 >= (uint64_t)0x12631a5cf5d3edU)
+  {
+    return true;
+  }
+  return false;
+}
+
+static inline bool eq(uint64_t *a, uint64_t *b)
+{
+  uint64_t a0 = a[0U];
+  uint64_t a1 = a[1U];
+  uint64_t a2 = a[2U];
+  uint64_t a3 = a[3U];
+  uint64_t a4 = a[4U];
+  uint64_t b0 = b[0U];
+  uint64_t b1 = b[1U];
+  uint64_t b2 = b[2U];
+  uint64_t b3 = b[3U];
+  uint64_t b4 = b[4U];
+  return a0 == b0 && a1 == b1 && a2 == b2 && a3 == b3 && a4 == b4;
+}
+
+bool Hacl_Impl_Ed25519_PointEqual_point_equal(uint64_t *p, uint64_t *q)
+{
+  uint64_t tmp[20U] = { 0U };
+  uint64_t *pxqz = tmp;
+  uint64_t *qxpz = tmp + (uint32_t)5U;
+  fmul0(pxqz, p, q + (uint32_t)10U);
+  reduce(pxqz);
+  fmul0(qxpz, q, p + (uint32_t)10U);
+  reduce(qxpz);
+  bool b = eq(pxqz, qxpz);
+  if (b)
+  {
+    uint64_t *pyqz = tmp + (uint32_t)10U;
+    uint64_t *qypz = tmp + (uint32_t)15U;
+    fmul0(pyqz, p + (uint32_t)5U, q + (uint32_t)10U);
+    reduce(pyqz);
+    fmul0(qypz, q + (uint32_t)5U, p + (uint32_t)10U);
+    reduce(qypz);
+    return eq(pyqz, qypz);
+  }
+  return false;
+}
+
+void Hacl_Impl_Ed25519_PointNegate_point_negate(uint64_t *p, uint64_t *out)
+{
+  uint64_t zero[5U] = { 0U };
+  zero[0U] = (uint64_t)0U;
+  zero[1U] = (uint64_t)0U;
+  zero[2U] = (uint64_t)0U;
+  zero[3U] = (uint64_t)0U;
+  zero[4U] = (uint64_t)0U;
+  uint64_t *x = p;
+  uint64_t *y = p + (uint32_t)5U;
+  uint64_t *z = p + (uint32_t)10U;
+  uint64_t *t = p + (uint32_t)15U;
+  uint64_t *x1 = out;
+  uint64_t *y1 = out + (uint32_t)5U;
+  uint64_t *z1 = out + (uint32_t)10U;
+  uint64_t *t1 = out + (uint32_t)15U;
+  memcpy(x1, x, (uint32_t)5U * sizeof (uint64_t));
+  fdifference(x1, zero);
+  Hacl_Bignum25519_reduce_513(x1);
+  memcpy(y1, y, (uint32_t)5U * sizeof (uint64_t));
+  memcpy(z1, z, (uint32_t)5U * sizeof (uint64_t));
+  memcpy(t1, t, (uint32_t)5U * sizeof (uint64_t));
+  fdifference(t1, zero);
+  Hacl_Bignum25519_reduce_513(t1);
+}
+
+void Hacl_Ed25519_sign(uint8_t *signature, uint8_t *priv, uint32_t len, uint8_t *msg)
+{
+  uint8_t ks[96U] = { 0U };
+  secret_expand(ks + (uint32_t)32U, priv);
+  secret_to_public(ks, priv);
+  sign_expanded(signature, ks, len, msg);
+}
+
+bool Hacl_Ed25519_verify(uint8_t *pub, uint32_t len, uint8_t *msg, uint8_t *signature)
+{
+  uint64_t tmp[45U] = { 0U };
+  uint8_t tmp_[32U] = { 0U };
+  uint64_t *a_ = tmp;
+  uint64_t *r_ = tmp + (uint32_t)20U;
+  bool b = Hacl_Impl_Ed25519_PointDecompress_point_decompress(a_, pub);
+  bool res;
+  if (b)
+  {
+    uint8_t *rs = signature;
+    bool b_ = Hacl_Impl_Ed25519_PointDecompress_point_decompress(r_, rs);
+    if (b_)
+    {
+      uint8_t *rs1 = signature;
+      uint64_t *a_1 = tmp;
+      uint64_t *r_1 = tmp + (uint32_t)20U;
+      uint64_t *s1 = tmp + (uint32_t)40U;
+      load_32_bytes(s1, signature + (uint32_t)32U);
+      bool b__ = gte_q(s1);
+      if (b__)
+      {
+        res = false;
+      }
+      else
+      {
+        uint64_t r_2[5U] = { 0U };
+        sha512_modq_pre_pre2(r_2, rs1, pub, len, msg);
+        store_56(tmp_, r_2);
+        uint8_t *uu____0 = signature + (uint32_t)32U;
+        uint64_t tmp1[60U] = { 0U };
+        uint64_t *hA = tmp1;
+        uint64_t *rhA = tmp1 + (uint32_t)20U;
+        uint64_t *sB = tmp1 + (uint32_t)40U;
+        point_mul_g(sB, uu____0);
+        Hacl_Impl_Ed25519_Ladder_point_mul(hA, tmp_, a_1);
+        Hacl_Impl_Ed25519_PointAdd_point_add(rhA, r_1, hA);
+        bool b1 = Hacl_Impl_Ed25519_PointEqual_point_equal(sB, rhA);
+        bool b10 = b1;
+        res = b10;
+      }
+    }
+    else
+    {
+      res = false;
+    }
+  }
+  else
+  {
+    res = false;
+  }
+  bool res0 = res;
+  return res0;
+}
+
+void Hacl_Ed25519_secret_to_public(uint8_t *pub, uint8_t *priv)
+{
+  secret_to_public(pub, priv);
+}
+
+void Hacl_Ed25519_expand_keys(uint8_t *ks, uint8_t *priv)
+{
+  secret_expand(ks + (uint32_t)32U, priv);
+  secret_to_public(ks, priv);
+}
+
+void Hacl_Ed25519_sign_expanded(uint8_t *signature, uint8_t *ks, uint32_t len, uint8_t *msg)
+{
+  sign_expanded(signature, ks, len, msg);
+}
+
+
+
+
Index: lib/freebl/verified/Hacl_Ed25519.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/freebl/verified/Hacl_Ed25519.h b/lib/freebl/verified/Hacl_Ed25519.h
new file mode 100644
--- /dev/null	(revision 15898+:f94b695d2232+)
+++ b/lib/freebl/verified/Hacl_Ed25519.h	(revision 15898+:f94b695d2232+)
@@ -0,0 +1,79 @@
+/* MIT License
+ *
+ * Copyright (c) 2016-2020 INRIA, CMU and Microsoft Corporation
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+
+#ifndef __Hacl_Ed25519_H
+#define __Hacl_Ed25519_H
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+//#include "evercrypt_targetconfig.h"
+#include "libintvector.h"
+#include "kremlin/internal/types.h"
+#include "kremlin/lowstar_endianness.h"
+#include <string.h>
+#include "kremlin/internal/target.h"
+
+
+#include "Hacl_Kremlib.h"
+#include "Hacl_Bignum25519_51.h"
+#include "Hacl_Curve25519_51.h"
+
+void Hacl_Bignum25519_reduce_513(uint64_t *a);
+
+void Hacl_Bignum25519_inverse(uint64_t *out, uint64_t *a);
+
+void Hacl_Bignum25519_load_51(uint64_t *output, uint8_t *input);
+
+void Hacl_Bignum25519_store_51(uint8_t *output, uint64_t *input);
+
+void Hacl_Impl_Ed25519_PointAdd_point_add(uint64_t *out, uint64_t *p, uint64_t *q);
+
+void Hacl_Impl_Ed25519_Ladder_point_mul(uint64_t *result, uint8_t *scalar, uint64_t *q);
+
+void Hacl_Impl_Ed25519_PointCompress_point_compress(uint8_t *z, uint64_t *p);
+
+bool Hacl_Impl_Ed25519_PointDecompress_point_decompress(uint64_t *out, uint8_t *s);
+
+bool Hacl_Impl_Ed25519_PointEqual_point_equal(uint64_t *p, uint64_t *q);
+
+void Hacl_Impl_Ed25519_PointNegate_point_negate(uint64_t *p, uint64_t *out);
+
+void Hacl_Ed25519_sign(uint8_t *signature, uint8_t *priv, uint32_t len, uint8_t *msg);
+
+bool Hacl_Ed25519_verify(uint8_t *pub, uint32_t len, uint8_t *msg, uint8_t *signature);
+
+void Hacl_Ed25519_secret_to_public(uint8_t *pub, uint8_t *priv);
+
+void Hacl_Ed25519_expand_keys(uint8_t *ks, uint8_t *priv);
+
+void Hacl_Ed25519_sign_expanded(uint8_t *signature, uint8_t *ks, uint32_t len, uint8_t *msg);
+
+#if defined(__cplusplus)
+}
+#endif
+
+#define __Hacl_Ed25519_H_DEFINED
+#endif
Index: lib/freebl/blapi.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/freebl/blapi.h b/lib/freebl/blapi.h
--- a/lib/freebl/blapi.h	(revision 15898:f94b695d2232ef360868a2b56094fc1f00f060e9)
+++ b/lib/freebl/blapi.h	(revision 15898+:f94b695d2232+)
@@ -1791,6 +1791,30 @@
  */
 extern int EC_GetPointSize(const ECParams *params);
 
+/* EdDSA (only on ed25519)
+** Generates a public and private key, both of which are encoded
+** in a single Ed25519PrivateKey struct. privKey is
+** output.
+*/
+extern SECStatus Ed25519_NewKey(EDDSAPrivateKey **privKey);
+
+/* On input,  msg == buffer containing message to be signed.
+**            key == key to be used for signature.
+** Output, signature == Buffer containing the signature.
+** Uses Hacl* code.
+*/
+extern SECStatus Ed25519_SignDigest(EDDSAPrivateKey *key, SECItem *signature,
+                                      const SECItem *msg);
+
+/* On input,  signature == buffer holding the signature.
+**            msg == buffer holding the message.
+**            key == key used to verify the signature.
+** Output, whether the signature is valid or not.
+*/
+extern SECStatus Ed25519_VerifyDigest(EDDSAPrivateKey *key, const SECItem *signature,
+                                      const SECItem *msg);
+
+
 SEC_END_PROTOS
 
 #endif /* _BLAPI_H_ */
Index: lib/freebl/blapit.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/freebl/blapit.h b/lib/freebl/blapit.h
--- a/lib/freebl/blapit.h	(revision 15898:f94b695d2232ef360868a2b56094fc1f00f060e9)
+++ b/lib/freebl/blapit.h	(revision 15898+:f94b695d2232+)
@@ -433,6 +433,17 @@
 };
 typedef struct ECPrivateKeyStr ECPrivateKey;
 
+struct EDDSAPublicKeyStr {
+    SECItem publicValue;
+};
+typedef struct EDDSAPublicKeyStr EDDSAPublicKey;
+
+struct EDDSAPrivateKeyStr {
+    SECItem publicValue;
+    SECItem privateValue; /* private big integer */
+};
+typedef struct EDDSAPrivateKeyStr EDDSAPrivateKey;
+
 typedef void *(*BLapiAllocateFunc)(void);
 typedef void (*BLapiDestroyContextFunc)(void *cx, PRBool freeit);
 typedef SECStatus (*BLapiInitContextFunc)(void *cx,
Index: lib/freebl/ec.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/freebl/ec.c b/lib/freebl/ec.c
--- a/lib/freebl/ec.c	(revision 15898:f94b695d2232ef360868a2b56094fc1f00f060e9)
+++ b/lib/freebl/ec.c	(revision 15898+:f94b695d2232+)
@@ -14,6 +14,8 @@
 #include "mplogic.h"
 #include "ec.h"
 #include "ecl.h"
+#include "verified/Hacl_Ed25519.h"
+
 
 static const ECMethod kMethods[] = {
     { ECCurve25519,
@@ -1131,3 +1133,176 @@
 
     return rv;
 }
+
+/*EdDSA: Currently only Ed22519 is implemented.*/
+
+
+SECStatus
+ed25519_NewKey(const unsigned char *pubKeyBytes, EDDSAPrivateKey **privKey,
+          const unsigned char *privKeyBytes, int privKeyLen)
+{
+    SECStatus rv = SECFailure;
+    PLArenaPool *arena;
+    EDDSAPrivateKey *key;
+    int len = privKeyLen;
+
+#if EC_DEBUG
+    printf("ed25519_NewKey called\n");
+#endif
+
+    if (!pubKeyBytes || !privKey || !privKeyBytes || privKeyLen <= 0) {
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return SECFailure;
+    }
+
+    /* Initialize an arena for the Ed25519 key. */
+    if (!(arena = PORT_NewArena(NSS_FREEBL_DEFAULT_CHUNKSIZE)))
+        return SECFailure;
+
+    key = (EDDSAPrivateKey *)PORT_ArenaZAlloc(arena, sizeof(EDDSAPrivateKey));
+    if (!key) {
+        PORT_FreeArena(arena, PR_TRUE);
+        return SECFailure;
+    }
+
+
+    /* Allocate memory for Public Key
+     * and Private Key.
+     */
+
+    SECITEM_AllocItem(arena, &key->publicValue, len*2);
+    SECITEM_AllocItem(arena, &key->privateValue, len);
+
+    /* Copy private key and public key*/
+    memcpy(key->privateValue.data, privKeyBytes, len);
+    memcpy(key->publicValue.data, pubKeyBytes, len*2);
+
+
+    /*Done */
+    rv = SECSuccess;
+    *privKey = key;
+
+    /* Cleanp*/
+    if (rv) {
+        PORT_FreeArena(arena, PR_TRUE);
+    }
+
+#if EC_DEBUG
+    printf("ed25519_NewKey returning %s\n",
+           (rv == SECSuccess) ? "success" : "failure");
+#endif
+
+    return rv;
+}
+
+
+/* Generate a random private key.
+ * Parameters
+ * - len: the length in octets of the order buffer
+ *
+ * Return Value
+ * Returns a buffer of len octets that holds the private key. The caller
+ * is responsible for freeing the buffer with PORT_ZFree.
+ */
+static unsigned char *
+ed25519_GenerateRandomPrivateKey(int len)
+{
+    SECStatus rv = SECFailure;
+    unsigned char *privKeyBytes = NULL;
+
+    /* Generates len random bytes using the global random bit generator
+     * (which implements Algorithm 1 of FIPS 186-2 Change Notice 1) then
+     * reduces modulo the group order.
+     */
+    if ((privKeyBytes = PORT_Alloc(len)) == NULL)
+        goto cleanup;
+    CHECK_SEC_OK(RNG_GenerateGlobalRandomBytes(privKeyBytes, len));
+
+cleanup:
+    if (rv != SECSuccess) {
+        PORT_ZFree(privKeyBytes, len);
+        privKeyBytes = NULL;
+    }
+    return privKeyBytes;
+}
+
+
+/* Generates a new Ed25519 key pair. The private key is a random value and
+ * the public key is generated through Hacl* code.
+ */
+SECStatus
+Ed25519_NewKey(EDDSAPrivateKey **privKey)
+{
+    SECStatus rv = SECFailure;
+    int len = Ed25519_PRIVATE_KEYLEN;
+    unsigned char *privKeyBytes = NULL;
+
+    if (!privKey) {
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return SECFailure;
+    }
+
+    privKeyBytes = ed25519_GenerateRandomPrivateKey(len);
+    if (privKeyBytes == NULL)
+        goto cleanup;
+    /* Generate public key */
+    unsigned char *pubKeyBytes = NULL;
+    if ((pubKeyBytes = PORT_Alloc(Ed25519_PUBLIC_KEYLEN)) == NULL)
+        goto cleanup;
+    Hacl_Ed25519_secret_to_public(pubKeyBytes, privKeyBytes);
+    //Hacl_Ed25519_secret_to_public(uint8_t *pub, uint8_t *priv)
+    CHECK_SEC_OK(ed25519_NewKey(pubKeyBytes, privKey, privKeyBytes, len));
+
+cleanup:
+    if (privKeyBytes) {
+        PORT_ZFree(privKeyBytes, Ed25519_PRIVATE_KEYLEN);
+    }
+    if (pubKeyBytes) {
+        PORT_ZFree(privKeyBytes, Ed25519_PUBLIC_KEYLEN);
+    }
+#if EC_DEBUG
+    printf("Ed25519_NewKey returning %s\n",
+           (rv == SECSuccess) ? "success" : "failure");
+#endif
+
+    return rv;
+}
+
+/*
+** Computes the EdDSA signature on the message using the given key.
+*/
+
+SECStatus
+Ed25519_SignDigest(EDDSAPrivateKey *key, SECItem *signature, const SECItem *msg)
+{
+    if (!key || !key->privateValue.data || key->privateValue.len != 32 ||
+        !msg || !signature || !signature->data ) {
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return SECFailure;
+    }
+    Hacl_Ed25519_sign(signature->data, key->privateValue.data, msg->len,
+                      msg->data);
+    return SECSuccess;
+}
+
+/*
+** Checks the signature on the given message using the key provided.
+*/
+
+
+SECStatus
+Ed25519_VerifyDigest(EDDSAPrivateKey *key, const SECItem *signature,
+                   const SECItem *msg)
+{
+    if (!key || !key->publicValue.data || key->publicValue.len != 32 ||
+        !msg || !signature || !signature->data ) {
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return SECFailure;
+    }
+    bool rv = Hacl_Ed25519_verify(key->publicValue.data, msg->len, msg->data,
+                                  signature->data);
+    if (rv) {
+        return SECSuccess;
+    }
+    return SECFailure;
+}
\ No newline at end of file
Index: lib/freebl/ec.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/freebl/ec.h b/lib/freebl/ec.h
--- a/lib/freebl/ec.h	(revision 15898:f94b695d2232ef360868a2b56094fc1f00f060e9)
+++ b/lib/freebl/ec.h	(revision 15898+:f94b695d2232+)
@@ -10,6 +10,9 @@
 #define ANSI_X962_CURVE_OID_TOTAL_LEN 10
 #define SECG_CURVE_OID_TOTAL_LEN 7
 #define PKIX_NEWCURVES_OID_TOTAL_LEN 11
+#define Ed25519_PRIVATE_KEYLEN 32
+#define Ed25519_PUBLIC_KEYLEN 64
+
 
 struct ECMethodStr {
     ECCurveName name;
Index: lib/freebl/freebl_base.gypi
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/freebl/freebl_base.gypi b/lib/freebl/freebl_base.gypi
--- a/lib/freebl/freebl_base.gypi	(revision 15898:f94b695d2232ef360868a2b56094fc1f00f060e9)
+++ b/lib/freebl/freebl_base.gypi	(revision 15898+:f94b695d2232+)
@@ -60,6 +60,7 @@
     'shvfy.c',
     'sysrand.c',
     'tlsprfalg.c',
+    'verified/Hacl_Ed25519.c',
   ],
   'conditions': [
     [ 'OS=="linux" or OS=="android"', {
Index: lib/freebl/ldvector.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/freebl/ldvector.c b/lib/freebl/ldvector.c
--- a/lib/freebl/ldvector.c	(revision 15898:f94b695d2232ef360868a2b56094fc1f00f060e9)
+++ b/lib/freebl/ldvector.c	(revision 15898+:f94b695d2232+)
@@ -376,9 +376,14 @@
       /* End of version 3.024 */
       ChaCha20_InitContext,
       ChaCha20_CreateContext,
-      ChaCha20_DestroyContext
+      ChaCha20_DestroyContext,
 
       /* End of version 3.025 */
+      Ed25519_NewKey,
+      Ed25519_SignDigest,
+      Ed25519_VerifyDigest
+
+      /* End of version 3.026 */
     };
 
 const FREEBLVector*
Index: lib/freebl/loader.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/freebl/loader.c b/lib/freebl/loader.c
--- a/lib/freebl/loader.c	(revision 15898:f94b695d2232ef360868a2b56094fc1f00f060e9)
+++ b/lib/freebl/loader.c	(revision 15898+:f94b695d2232+)
@@ -2446,3 +2446,30 @@
         return;
     (vector->p_CMAC_Destroy)(ctx, free_it);
 }
+
+SECStatus
+Ed25519_NewKey(EDDSAPrivateKey **privKey)
+{
+    if (!vector && PR_SUCCESS != freebl_RunLoaderOnce())
+        return SECFailure;
+    return (vector->p_Ed25519_NewKey)(privKey);
+}
+
+SECStatus
+Ed25519_SignDigest(EDDSAPrivateKey *key, SECItem *signature,
+                     const SECItem *msg)
+{
+    if (!vector && PR_SUCCESS != freebl_RunLoaderOnce())
+        return SECFailure;
+    return (vector->p_Ed25519_SignDigest)(key, signature, msg);
+}
+
+SECStatus
+Ed25519_VerifyDigest(EDDSAPrivateKey *key, const SECItem *signature,
+                   const SECItem *msg)
+{
+    if (!vector && PR_SUCCESS != freebl_RunLoaderOnce())
+        return SECFailure;
+    return (vector->p_Ed25519_VerifyDigest)(key, signature, msg);
+}
+
Index: lib/freebl/loader.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/freebl/loader.h b/lib/freebl/loader.h
--- a/lib/freebl/loader.h	(revision 15898:f94b695d2232ef360868a2b56094fc1f00f060e9)
+++ b/lib/freebl/loader.h	(revision 15898+:f94b695d2232+)
@@ -10,7 +10,7 @@
 
 #include "blapi.h"
 
-#define FREEBL_VERSION 0x0325
+#define FREEBL_VERSION 0x0326
 
 struct FREEBLVectorStr {
 
@@ -831,6 +831,13 @@
     void (*p_ChaCha20_DestroyContext)(ChaCha20Context *ctx, PRBool freeit);
 
     /* Version 3.025 came to here */
+    SECStatus (*p_Ed25519_NewKey)(EDDSAPrivateKey **privKey);
+    SECStatus (*p_Ed25519_SignDigest)(EDDSAPrivateKey *key, SECItem *signature, const SECItem *msg);
+    SECStatus (*p_Ed25519_VerifyDigest)(EDDSAPrivateKey *key, const SECItem *signature,
+                                            const SECItem *msg);
+
+    /* Version 3.026 came to here */
+
 
     /* Add new function pointers at the end of this struct and bump
      * FREEBL_VERSION at the beginning of this file. */
